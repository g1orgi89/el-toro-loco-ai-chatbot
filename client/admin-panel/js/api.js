/**
 * api.js - —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ Shrooms
 * 
 * @fileoverview –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ HTTP –∑–∞–ø—Ä–æ—Å–∞–º–∏ —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
 * @author Shrooms Development Team
 */

/**
 * @typedef {Object} ApiRequestOptions
 * @property {string} [method='GET'] - HTTP –º–µ—Ç–æ–¥
 * @property {Object} [headers] - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
 * @property {string|FormData|Object} [body] - –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
 * @property {boolean} [requireAuth=true] - –¢—Ä–µ–±–æ–≤–∞—Ç—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
 */

/**
 * @typedef {Object} ApiResponse
 * @property {boolean} success - –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–∞
 * @property {*} [data] - –î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞
 * @property {Object} [error] - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—à–∏–±–∫–µ
 * @property {string} [error.message] - –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
 * @property {string} [error.code] - –ö–æ–¥ –æ—à–∏–±–∫–∏
 */

/**
 * –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API
 */
const API_CONFIG = {
  /** @type {string} –ë–∞–∑–æ–≤—ã–π URL –¥–ª—è API */
  BASE_URL: '',
  
  /** @type {number} –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö */
  TIMEOUT: 30000,
  
  /** @type {string} –ö–ª—é—á –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –≤ localStorage */
  TOKEN_KEY: 'adminToken',
  
  /** @type {string} –ö–ª—é—á –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è */
  USERNAME_KEY: 'adminUsername'
};

/**
 * –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API
 */
class ApiClient {
  /**
   * @constructor
   */
  constructor() {
    this.baseURL = API_CONFIG.BASE_URL;
    this.timeout = API_CONFIG.TIMEOUT;
  }
  
  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Ç–æ–∫–µ–Ω –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏–∑ localStorage
   * @returns {string|null} –¢–æ–∫–µ–Ω –∏–ª–∏ null –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω
   */
  getAuthToken() {
    try {
      return localStorage.getItem(API_CONFIG.TOKEN_KEY);
    } catch (error) {
      console.error('üçÑ –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:', error);
      return null;
    }
  }
  
  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ localStorage
   * @returns {string|null} –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ null
   */
  getUsername() {
    try {
      return localStorage.getItem(API_CONFIG.USERNAME_KEY);
    } catch (error) {
      console.error('üçÑ –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
      return null;
    }
  }
  
  /**
   * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–æ–∫–µ–Ω –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤ localStorage
   * @param {string} token - –¢–æ–∫–µ–Ω –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
   */
  setAuthToken(token) {
    try {
      localStorage.setItem(API_CONFIG.TOKEN_KEY, token);
    } catch (error) {
      console.error('üçÑ –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:', error);
    }
  }
  
  /**
   * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ localStorage
   * @param {string} username - –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  setUsername(username) {
    try {
      localStorage.setItem(API_CONFIG.USERNAME_KEY, username);
    } catch (error) {
      console.error('üçÑ –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    }
  }
  
  /**
   * –û—á–∏—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
   */
  clearAuth() {
    try {
      localStorage.removeItem(API_CONFIG.TOKEN_KEY);
      localStorage.removeItem(API_CONFIG.USERNAME_KEY);
    } catch (error) {
      console.error('üçÑ –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:', error);
    }
  }
  
  /**
   * –í—ã–ø–æ–ª–Ω—è–µ—Ç HTTP –∑–∞–ø—Ä–æ—Å —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
   * @param {string} url - URL –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ (–æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –∏–ª–∏ –∞–±—Å–æ–ª—é—Ç–Ω—ã–π)
   * @param {ApiRequestOptions} [options] - –û–ø—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–∞
   * @returns {Promise<ApiResponse>} –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞
   */
  async request(url, options = {}) {
    const {
      method = 'GET',
      headers = {},
      body = null,
      requireAuth = true
    } = options;
    
    try {
      // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π URL
      const fullURL = url.startsWith('http') ? url : `${this.baseURL}${url}`;
      
      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
      const requestHeaders = { ...headers };
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è
      if (requireAuth) {
        const token = this.getAuthToken();
        if (!token) {
          throw new Error('–¢–æ–∫–µ–Ω –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }
        requestHeaders['Authorization'] = `Bearer ${token}`;
      }
      
      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
      let requestBody = body;
      
      // –ï—Å–ª–∏ —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ - –æ–±—ä–µ–∫—Ç, –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ JSON
      if (body && typeof body === 'object' && !(body instanceof FormData)) {
        requestHeaders['Content-Type'] = 'application/json';
        requestBody = JSON.stringify(body);
      }
      
      // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è –æ—Ç–º–µ–Ω—ã –∑–∞–ø—Ä–æ—Å–∞ –ø–æ —Ç–∞–π–º–∞—É—Ç—É
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), this.timeout);
      
      console.log(`üçÑ API –∑–∞–ø—Ä–æ—Å: ${method} ${fullURL}`);
      
      // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
      const response = await fetch(fullURL, {
        method,
        headers: requestHeaders,
        body: requestBody,
        signal: controller.signal
      });
      
      clearTimeout(timeoutId);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
      if (response.status === 401 || response.status === 403) {
        console.warn('üçÑ –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏, –æ—á–∏—â–∞–µ–º —Ç–æ–∫–µ–Ω—ã');
        this.clearAuth();
        
        // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞, –µ—Å–ª–∏ –º—ã –Ω–µ –Ω–∞ –Ω–µ–π
        if (!window.location.pathname.includes('login.html')) {
          window.location.href = 'login.html';
        }
        
        throw new Error('–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞, —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è');
      }
      
      // –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç
      let result;
      const contentType = response.headers.get('content-type');
      
      if (contentType && contentType.includes('application/json')) {
        result = await response.json();
      } else {
        const text = await response.text();
        result = { success: response.ok, data: text };
      }
      
      // –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª–µ success, –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –ø–æ —Å—Ç–∞—Ç—É—Å—É
      if (typeof result.success === 'undefined') {
        result.success = response.ok;
      }
      
      // –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–µ —É—Å–ø–µ—à–µ–Ω, –Ω–æ —Å–µ—Ä–≤–µ—Ä –Ω–µ –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É
      if (!response.ok && !result.error) {
        result.error = {
          message: `HTTP ${response.status}: ${response.statusText}`,
          code: `HTTP_${response.status}`
        };
      }
      
      console.log(`üçÑ API –æ—Ç–≤–µ—Ç: ${response.status} ${response.statusText}`);
      
      return result;
    } catch (error) {
      console.error('üçÑ –û—à–∏–±–∫–∞ API –∑–∞–ø—Ä–æ—Å–∞:', error);
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏
      let errorMessage = error.message;
      let errorCode = 'UNKNOWN_ERROR';
      
      if (error.name === 'AbortError') {
        errorMessage = '–ó–∞–ø—Ä–æ—Å –ø—Ä–µ–≤—ã—Å–∏–ª –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è';
        errorCode = 'TIMEOUT';
      } else if (error.message.includes('Failed to fetch')) {
        errorMessage = '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É';
        errorCode = 'NETWORK_ERROR';
      }
      
      return {
        success: false,
        error: {
          message: errorMessage,
          code: errorCode
        }
      };
    }
  }
  
  /**
   * –í—ã–ø–æ–ª–Ω—è–µ—Ç GET –∑–∞–ø—Ä–æ—Å
   * @param {string} url - URL –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
   * @param {ApiRequestOptions} [options] - –û–ø—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–∞
   * @returns {Promise<ApiResponse>} –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞
   */
  async get(url, options = {}) {
    return this.request(url, { ...options, method: 'GET' });
  }
  
  /**
   * –í—ã–ø–æ–ª–Ω—è–µ—Ç POST –∑–∞–ø—Ä–æ—Å
   * @param {string} url - URL –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
   * @param {*} [body] - –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
   * @param {ApiRequestOptions} [options] - –û–ø—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–∞
   * @returns {Promise<ApiResponse>} –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞
   */
  async post(url, body = null, options = {}) {
    return this.request(url, { ...options, method: 'POST', body });
  }
  
  /**
   * –í—ã–ø–æ–ª–Ω—è–µ—Ç PUT –∑–∞–ø—Ä–æ—Å
   * @param {string} url - URL –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
   * @param {*} [body] - –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
   * @param {ApiRequestOptions} [options] - –û–ø—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–∞
   * @returns {Promise<ApiResponse>} –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞
   */
  async put(url, body = null, options = {}) {
    return this.request(url, { ...options, method: 'PUT', body });
  }
  
  /**
   * –í—ã–ø–æ–ª–Ω—è–µ—Ç PATCH –∑–∞–ø—Ä–æ—Å
   * @param {string} url - URL –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
   * @param {*} [body] - –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
   * @param {ApiRequestOptions} [options] - –û–ø—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–∞
   * @returns {Promise<ApiResponse>} –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞
   */
  async patch(url, body = null, options = {}) {
    return this.request(url, { ...options, method: 'PATCH', body });
  }
  
  /**
   * –í—ã–ø–æ–ª–Ω—è–µ—Ç DELETE –∑–∞–ø—Ä–æ—Å
   * @param {string} url - URL –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
   * @param {ApiRequestOptions} [options] - –û–ø—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–∞
   * @returns {Promise<ApiResponse>} –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞
   */
  async delete(url, options = {}) {
    return this.request(url, { ...options, method: 'DELETE' });
  }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä API –∫–ª–∏–µ–Ω—Ç–∞
const apiClient = new ApiClient();

/**
 * –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º
 * @param {string} url - URL –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
 * @param {ApiRequestOptions} [options] - –û–ø—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–∞
 * @returns {Promise<ApiResponse>} –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞
 */
async function makeAuthenticatedRequest(url, options = {}) {
  return apiClient.request(url, options);
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
window.apiClient = apiClient;
window.makeAuthenticatedRequest = makeAuthenticatedRequest;
window.API_CONFIG = API_CONFIG;