#!/usr/bin/env node
/**
 * Check Progress Script for Shrooms Support Bot
 * @file scripts/check-progress.js
 */

const fs = require('fs');
const path = require('path');

const CONTEXT_FILE = path.join(__dirname, '../CONTEXT_FIXES.md');
const PLAN_FILE = path.join(__dirname, '../DETAILED_REPAIR_PLAN.md');

function main() {
  console.log('üîç –ü–†–û–í–ï–†–ö–ê –ü–†–û–ì–†–ï–°–°–ê –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô\n');
  
  // Check if context files exist
  if (!fs.existsSync(CONTEXT_FILE)) {
    console.error('‚ùå –§–∞–π–ª CONTEXT_FIXES.md –Ω–µ –Ω–∞–π–¥–µ–Ω!');
    process.exit(1);
  }
  
  if (!fs.existsSync(PLAN_FILE)) {
    console.error('‚ùå –§–∞–π–ª DETAILED_REPAIR_PLAN.md –Ω–µ –Ω–∞–π–¥–µ–Ω!');
    process.exit(1);
  }
  
  // Read context file
  const contextContent = fs.readFileSync(CONTEXT_FILE, 'utf8');
  
  // Extract statistics
  const stats = extractStatistics(contextContent);
  
  // Display summary
  displaySummary(stats);
  
  // Show next steps
  showNextSteps(contextContent);
  
  console.log('\nüìÇ –§–ê–ô–õ–´ –î–õ–Ø –†–ê–ë–û–¢–´:');
  console.log(`- CONTEXT_FIXES.md: ${CONTEXT_FILE}`);
  console.log(`- DETAILED_REPAIR_PLAN.md: ${PLAN_FILE}`);
  console.log('\nüí° –°–û–í–ï–¢: –í—Å–µ–≥–¥–∞ –æ–±–Ω–æ–≤–ª—è–π—Ç–µ CONTEXT_FIXES.md –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è');
}

function extractStatistics(content) {
  const lines = content.split('\n');
  const stats = {
    total: 0,
    fixed: 0,
    inProgress: 0,
    pending: 0,
    fixedList: [],
    inProgressList: [],
    pendingList: []
  };
  
  let currentStatus = null;
  let currentItem = null;
  
  for (const line of lines) {
    if (line.includes('### ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï –û–®–ò–ë–ö–ò')) {
      currentStatus = 'fixed';
      const match = line.match(/\((\d+)\/(\d+)\)/);
      if (match) {
        stats.fixed = parseInt(match[1]);
      }
    } else if (line.includes('### üîÑ –í –†–ê–ë–û–¢–ï')) {
      currentStatus = 'inProgress';
      const match = line.match(/\((\d+)\/(\d+)\)/);
      if (match) {
        stats.inProgress = parseInt(match[1]);
      }
    } else if (line.includes('### ‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´')) {
      currentStatus = 'pending';
      const match = line.match(/\((\d+)\/(\d+)\)/);
      if (match) {
        stats.pending = parseInt(match[1]);
        stats.total = parseInt(match[2]);
      }
    } else if (line.startsWith('#### ') && currentStatus) {
      currentItem = {
        title: line.replace('#### ', '').replace(/^\d+\.\s*/, ''),
        details: []
      };
    } else if (currentItem && line.startsWith('- **')) {
      const [key, value] = line.split(': ');
      if (key && value) {
        currentItem.details.push({
          key: key.replace('- **', '').replace('**', ''),
          value: value
        });
      }
    } else if (currentItem && line.trim() === '' && currentStatus) {
      stats[currentStatus + 'List'].push(currentItem);
      currentItem = null;
    }
  }
  
  return stats;
}

function displaySummary(stats) {
  console.log('üìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:');
  console.log('‚îÄ'.repeat(50));
  console.log(`üìã –í—Å–µ–≥–æ –æ—à–∏–±–æ–∫:        ${stats.total}`);
  console.log(`‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ:          ${stats.fixed} (${Math.round(stats.fixed/stats.total*100)}%)`);
  console.log(`üîÑ –í —Ä–∞–±–æ—Ç–µ:            ${stats.inProgress} (${Math.round(stats.inProgress/stats.total*100)}%)`);
  console.log(`‚ùå –û–∂–∏–¥–∞—é—Ç:             ${stats.pending} (${Math.round(stats.pending/stats.total*100)}%)`);
  console.log('‚îÄ'.repeat(50));
  
  // Progress bar
  const progress = stats.fixed / stats.total;
  const barLength = 30;
  const filledLength = Math.round(barLength * progress);
  const bar = '‚ñà'.repeat(filledLength) + '‚ñë'.repeat(barLength - filledLength);
  console.log(`\nüìà –ü—Ä–æ–≥—Ä–µ—Å—Å: [${bar}] ${Math.round(progress * 100)}%\n`);
  
  // Show recently fixed
  if (stats.fixedList.length > 0) {
    console.log('‚úÖ –ù–ï–î–ê–í–ù–û –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï:');
    stats.fixedList.slice(-3).forEach(item => {
      console.log(`  ‚Ä¢ ${item.title}`);
    });
    console.log('');
  }
  
  // Show in progress
  if (stats.inProgressList.length > 0) {
    console.log('üîÑ –í –†–ê–ë–û–¢–ï:');
    stats.inProgressList.forEach(item => {
      console.log(`  ‚Ä¢ ${item.title}`);
    });
    console.log('');
  }
}

function showNextSteps(content) {
  console.log('üéØ –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:');
  console.log('‚îÄ'.repeat(50));
  
  const nextStepMatch = content.match(/## üéØ –ü–õ–ê–ù –î–ï–ô–°–¢–í–ò–ô\n\n(.*?)\n\n##/s);
  if (nextStepMatch) {
    const steps = nextStepMatch[1].split('\n').filter(line => line.trim().startsWith('**'));
    steps.slice(0, 3).forEach((step, index) => {
      console.log(`${index + 1}. ${step.replace(/\*\*/g, '')}`);
    });
  } else {
    console.log('1. –ü—Ä–æ—á–∏—Ç–∞—Ç—å DETAILED_REPAIR_PLAN.md');
    console.log('2. –í—ã–±—Ä–∞—Ç—å –ø–µ—Ä–≤—É—é –Ω–µ–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –æ—à–∏–±–∫—É');
    console.log('3. –°–ª–µ–¥–æ–≤–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –≤ –ø–ª–∞–Ω–µ');
  }
  
  console.log('\nüí° –ü–û–õ–ï–ó–ù–´–ï –ö–û–ú–ê–ù–î–´:');
  console.log('  ‚Ä¢ git status                 - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è');
  console.log('  ‚Ä¢ npm test                   - –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã (–µ—Å–ª–∏ –µ—Å—Ç—å)');
  console.log('  ‚Ä¢ npm start                  - –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä');
}

if (require.main === module) {
  main();
}

module.exports = { main, extractStatistics, displaySummary, showNextSteps };
