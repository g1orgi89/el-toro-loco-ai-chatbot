/**
 * –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ fallback –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è Shrooms AI Support Bot
 * @file server/config/prompts.js
 * üçÑ –û–ë–ù–û–í–õ–ï–ù–û: –û—á–∏—â–µ–Ω –æ—Ç —Å–ª–æ–∂–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤, —Ç–µ–ø–µ—Ä—å —Ç–æ–ª—å–∫–æ fallback —Å–∏—Å—Ç–µ–º–∞
 * 
 * ‚ö†Ô∏è –í–ê–ñ–ù–û: –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã —Ç–µ–ø–µ—Ä—å —É–ø—Ä–∞–≤–ª—è—é—Ç—Å—è —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –∏ —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ MongoDB!
 * –≠—Ç–æ—Ç —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ fallback –ø—Ä–æ–º–ø—Ç—ã –Ω–∞ —Å–ª—É—á–∞–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ë–î.
 * 
 * –ú–ò–ì–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê: –ü—Ä–æ–º–ø—Ç—ã –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã –Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ PromptService
 */

const { 
  FALLBACK_PROMPTS, 
  RAG_FALLBACK_PROMPTS, 
  TICKET_DETECTION_FALLBACK,
  CATEGORIZATION_FALLBACK,
  SUBJECT_FALLBACK 
} = require('./fallbackPrompts');

/**
 * üçÑ –£–°–¢–ê–†–ï–í–®–ò–ï –§–£–ù–ö–¶–ò–ò: –°–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
 * –í –Ω–æ–≤–æ–º –∫–æ–¥–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ PromptService –Ω–∞–ø—Ä—è–º—É—é!
 */

/**
 * @deprecated –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ promptService.getActivePrompt() –≤–º–µ—Å—Ç–æ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
 * –ü–æ–ª—É—á–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç (LEGACY FALLBACK)
 * @param {string} type - –¢–∏–ø –ø—Ä–æ–º–ø—Ç–∞
 * @param {string} [language='en'] - –Ø–∑—ã–∫ –ø—Ä–æ–º–ø—Ç–∞
 * @returns {string} Fallback –ø—Ä–æ–º–ø—Ç
 */
function getSystemPrompt(type, language = 'en') {
  console.warn('üçÑ DEPRECATED: getSystemPrompt() - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ promptService.getActivePrompt()');
  
  const normalizedLanguage = ['en', 'es', 'ru'].includes(language) ? language : 'en';
  
  switch (type) {
    case 'rag':
      return `${FALLBACK_PROMPTS[normalizedLanguage]}\n\n${RAG_FALLBACK_PROMPTS[normalizedLanguage]}`;
    case 'ticket':
      return TICKET_DETECTION_FALLBACK;
    case 'categorization':
      return CATEGORIZATION_FALLBACK;
    case 'subject':
      return SUBJECT_FALLBACK;
    case 'basic':
    default:
      return FALLBACK_PROMPTS[normalizedLanguage];
  }
}

/**
 * @deprecated –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ promptService.getActivePrompt() –≤–º–µ—Å—Ç–æ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
 * –°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è RAG (LEGACY FALLBACK)
 * @param {string[]} context - –ö–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
 * @param {string} userMessage - –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {string} language - –Ø–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @returns {string} –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –ø—Ä–æ–º–ø—Ç
 */
function createContextPrompt(context, userMessage, language = 'en') {
  console.warn('üçÑ DEPRECATED: createContextPrompt() - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ promptService.getActivePrompt("rag")');
  
  if (!context || context.length === 0) {
    return getSystemPrompt('basic', language);
  }

  const normalizedLanguage = ['en', 'es', 'ru'].includes(language) ? language : 'en';
  
  const contextHeaders = {
    en: '### Relevant information from knowledge base:',
    es: '### Informaci√≥n relevante de la base de conocimientos:',
    ru: '### –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π:'
  };
  
  const sourceHeaders = {
    en: 'Source',
    es: 'Fuente', 
    ru: '–ò—Å—Ç–æ—á–Ω–∏–∫'
  };
  
  const useOnlyHeaders = {
    en: '### USE ONLY the above information to answer the user\'s question.\nIf information is insufficient, suggest creating a support ticket.\n\n### User\'s question:',
    es: '### USA SOLO la informaci√≥n anterior para responder la pregunta del usuario.\nSi la informaci√≥n es insuficiente, sugiere crear un ticket de soporte.\n\n### Pregunta del usuario:',
    ru: '### –ò–°–ü–û–õ–¨–ó–£–ô –¢–û–õ–¨–ö–û –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω—É—é –≤—ã—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n–ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, –ø—Ä–µ–¥–ª–æ–∂–∏ —Å–æ–∑–¥–∞—Ç—å —Ç–∏–∫–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏.\n\n### –í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:'
  };

  const contextSection = `${contextHeaders[normalizedLanguage]}\n\n${context.map((item, index) => `**${sourceHeaders[normalizedLanguage]} ${index + 1}:**\n${item}`).join('\n\n')}\n\n${useOnlyHeaders[normalizedLanguage]}\n${userMessage}`;

  return `${getSystemPrompt('rag', normalizedLanguage)}\n\n${contextSection}`;
}

/**
 * @deprecated –§—É–Ω–∫—Ü–∏—è –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ
 * –ü–æ–ª—É—á–∏—Ç—å –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç (LEGACY FALLBACK)
 * @param {string} key - –ö–ª—é—á –ø—Ä–æ–º–ø—Ç–∞
 * @param {string} language - –Ø–∑—ã–∫
 * @returns {string} –ü—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
 */
function getLocalizedPrompt(key, language = 'en') {
  console.warn('üçÑ DEPRECATED: getLocalizedPrompt() - –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã —Ç–µ–ø–µ—Ä—å –≤ PromptService');
  
  // –ü—Ä–æ—Å—Ç—ã–µ fallback —Å–æ–æ–±—â–µ–Ω–∏—è
  const fallbackMessages = {
    en: {
      greeting: "Hello! I'm Sporus, your AI assistant for Shrooms. How can I help you?",
      error: "I'm experiencing technical difficulties. Please try again.",
      outOfScope: "I can only help with questions about the Shrooms project."
    },
    ru: {
      greeting: "–ü—Ä–∏–≤–µ—Ç! –Ø Sporus, —Ç–≤–æ–π –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è Shrooms. –ö–∞–∫ –º–æ–≥—É –ø–æ–º–æ—á—å?",
      error: "–£ –º–µ–Ω—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
      outOfScope: "–Ø –º–æ–≥—É –ø–æ–º–æ—á—å —Ç–æ–ª—å–∫–æ —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –æ –ø—Ä–æ–µ–∫—Ç–µ Shrooms."
    },
    es: {
      greeting: "¬°Hola! Soy Sporus, tu asistente IA para Shrooms. ¬øC√≥mo puedo ayudarte?",
      error: "Estoy experimentando dificultades t√©cnicas. Int√©ntalo de nuevo.",
      outOfScope: "Solo puedo ayudar con preguntas sobre el proyecto Shrooms."
    }
  };
  
  const normalizedLanguage = ['en', 'es', 'ru'].includes(language) ? language : 'en';
  return fallbackMessages[normalizedLanguage]?.[key] || fallbackMessages.en[key] || "I can help you with Shrooms project questions.";
}

/**
 * –ó–∞–º–µ–Ω–∏—Ç—å –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã –≤ –ø—Ä–æ–º–ø—Ç–µ (LEGACY FUNCTION)
 * @param {string} prompt - –ü—Ä–æ–º–ø—Ç —Å –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–∞–º–∏
 * @param {Object} replacements - –û–±—ä–µ–∫—Ç —Å –∑–∞–º–µ–Ω–∞–º–∏
 * @returns {string} –ü—Ä–æ–º–ø—Ç —Å –∑–∞–º–µ–Ω–µ–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
 */
function replacePromptPlaceholders(prompt, replacements = {}) {
  let result = prompt;
  
  Object.entries(replacements).forEach(([key, value]) => {
    const placeholder = new RegExp(`{{${key}}}`, 'g');
    result = result.replace(placeholder, value);
  });
  
  if (replacements.ticketId) {
    result = result.replace(/TICKET_ID/g, replacements.ticketId);
  }
  
  return result;
}

/**
 * –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–º–ø—Ç–æ–≤ (LEGACY FUNCTION)
 * @param {string} prompt - –ü—Ä–æ–º–ø—Ç –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
 * @returns {boolean} –í–∞–ª–∏–¥–µ–Ω –ª–∏ –ø—Ä–æ–º–ø—Ç
 */
function validatePrompt(prompt) {
  if (!prompt || typeof prompt !== 'string') {
    return false;
  }
  
  if (prompt.length > 100000) {
    return false;
  }
  
  return true;
}

/**
 * üçÑ –≠–ö–°–ü–û–†–¢: –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –Ω–∞–±–æ—Ä –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
 * 
 * ‚ö†Ô∏è –ù–û–í–´–ô –ö–û–î –î–û–õ–ñ–ï–ù –ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨:
 * const promptService = require('../services/promptService');
 * const prompt = await promptService.getActivePrompt('basic', 'en');
 */
module.exports = {
  // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º fallback –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
  FALLBACK_PROMPTS,
  RAG_FALLBACK_PROMPTS,
  TICKET_DETECTION_FALLBACK,
  CATEGORIZATION_FALLBACK,
  SUBJECT_FALLBACK,
  
  // DEPRECATED —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
  getSystemPrompt,
  createContextPrompt,
  getLocalizedPrompt,
  replacePromptPlaceholders,
  validatePrompt,
  
  // –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Å—Ç–∞—Ä–æ–≥–æ –∫–æ–¥–∞ (DEPRECATED)
  BASIC_SYSTEM_PROMPTS: FALLBACK_PROMPTS,
  RAG_SYSTEM_PROMPTS: RAG_FALLBACK_PROMPTS,
  TICKET_DETECTION_PROMPT: TICKET_DETECTION_FALLBACK,
  TICKET_CATEGORIZATION_PROMPT: CATEGORIZATION_FALLBACK,
  TICKET_SUBJECT_PROMPT: SUBJECT_FALLBACK,
  LANGUAGE_SPECIFIC_PROMPTS: {
    en: { greeting: "Hello! I'm Sporus, your AI assistant for Shrooms." },
    ru: { greeting: "–ü—Ä–∏–≤–µ—Ç! –Ø Sporus, —Ç–≤–æ–π –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è Shrooms." },
    es: { greeting: "¬°Hola! Soy Sporus, tu asistente IA para Shrooms." }
  }
};
