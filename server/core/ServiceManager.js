/**
 * @file ServiceManager - —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞–º–∏
 * @description –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è,
 * dependency injection –∏ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
 */

/**
 * @typedef {Object} ServiceConfig
 * @property {Function} factory - –§–∞–±—Ä–∏—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞
 * @property {string[]} [dependencies] - –ú–∞—Å—Å–∏–≤ –∏–º–µ–Ω –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
 * @property {boolean} [singleton=true] - –°–æ–∑–¥–∞–≤–∞—Ç—å –∫–∞–∫ singleton
 * @property {boolean} [lazy=true] - –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –æ–±—Ä–∞—â–µ–Ω–∏–∏
 */

/**
 * @typedef {Object} ServiceInfo
 * @property {string} name - –ò–º—è —Å–µ—Ä–≤–∏—Å–∞
 * @property {ServiceConfig} config - –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞
 * @property {any} [instance] - –°–æ–∑–¥–∞–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä (–¥–ª—è singleton)
 * @property {boolean} initialized - –§–ª–∞–≥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
 * @property {number} initOrder - –ü–æ—Ä—è–¥–æ–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
 */

/**
 * –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–µ—Ä–≤–∏—Å–æ–≤ –¥–ª—è —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏
 */
class ServiceManager {
  constructor() {
    /** @type {Map<string, ServiceInfo>} */
    this.services = new Map();
    
    /** @type {Set<string>} */
    this.initializing = new Set();
    
    /** @type {number} */
    this.initCounter = 0;
    
    this.logger = console; // –ú–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –ª–æ–≥–≥–µ—Ä
    
    // üçÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
    this._autoRegisterServices();
  }

  /**
   * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã
   * @private
   */
  _autoRegisterServices() {
    try {
      // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã
      this._registerCoreServices();
    } catch (error) {
      this.logger.error('Error during auto-registration:', error);
    }
  }

  /**
   * –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã —Å–∏—Å—Ç–µ–º—ã
   * @private
   */
  _registerCoreServices() {
    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º Database Service
    this.register('database', () => {
      const DatabaseService = require('../services/database');
      return DatabaseService;
    }, {
      singleton: true,
      lazy: false // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ä–∞–∑—É
    });

    // üçÑ Claude Service —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è –∫–∞–∫ –∫–ª–∞—Å—Å –Ω–∞–ø—Ä—è–º—É—é
    this.register('claude', () => {
      const ClaudeService = require('../services/claude'); 
      return new ClaudeService({
        apiKey: process.env.ANTHROPIC_API_KEY,
        model: 'claude-3-haiku-20240307',
        maxTokens: 1000,
        temperature: 0.7
      });
    }, {
      singleton: true,
      dependencies: []
    });

    // üçÑ VectorStore Service (—ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è –∫–∞–∫ –∫–ª–∞—Å—Å)
    this.register('vectorStore', () => {
      const VectorStoreService = require('../services/vectorStore');
      return new VectorStoreService({
        url: process.env.VECTOR_DB_URL || 'http://localhost:6333',
        collectionName: 'shrooms_knowledge',
        embeddingProvider: {
          provider: 'openai',
          apiKey: process.env.OPENAI_API_KEY,
          model: 'text-embedding-ada-002'
        }
      });
    }, {
      singleton: true,
      dependencies: []
    });

    // üçÑ Knowledge Service (—ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è –∫–∞–∫ singleton instance!)
    this.register('knowledge', () => {
      const knowledgeService = require('../services/knowledge'); // –£–∂–µ —ç–∫–∑–µ–º–ø–ª—è—Ä
      return knowledgeService;
    }, {
      singleton: true,
      dependencies: [] // –ù–µ —Ç—Ä–µ–±—É–µ—Ç vectorStore - —É –Ω–∏—Ö —Ä–∞–∑–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞
    });

    // üçÑ Ticketing Service (—ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è –∫–∞–∫ –∫–ª–∞—Å—Å)
    this.register('ticketing', ['database'], (database) => {
      const TicketService = require('../services/ticketing');
      return new TicketService(database);
    }, {
      singleton: true,
      dependencies: ['database']
    });

    // üçÑ Message Service (—ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è –∫–∞–∫ singleton instance!)
    this.register('message', () => {
      const messageService = require('../services/message'); // –£–∂–µ —ç–∫–∑–µ–º–ø–ª—è—Ä
      return messageService;
    }, {
      singleton: true,
      dependencies: [] // MessageService —Å–æ–∑–¥–∞–µ—Ç —Å–≤–æ—é —Å—Ö–µ–º—É Mongoose
    });

    // üçÑ Chat Service - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π singleton instance
    this.register('chat', () => {
      // ChatService-improved —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è –∫–∞–∫ singleton instance
      const chatService = require('../services/chatService-improved');
      return chatService;
    }, {
      singleton: true,
      dependencies: [] // ChatService-improved –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç —Å–µ—Ä–≤–∏—Å—ã —Å–∞–º
    });

    this.logger.info('Core services registered successfully');
  }

  /**
   * –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç —Å–µ—Ä–≤–∏—Å –≤ –º–µ–Ω–µ–¥–∂–µ—Ä–µ
   * @param {string} name - –£–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Å–µ—Ä–≤–∏—Å–∞
   * @param {string[]|Function} factoryOrDeps - –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏–ª–∏ —Ñ–∞–±—Ä–∏—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è 
   * @param {Function|Omit<ServiceConfig, 'factory'>} [factoryOrOptions] - –§–∞–±—Ä–∏–∫–∞ –∏–ª–∏ –æ–ø—Ü–∏–∏
   * @param {Omit<ServiceConfig, 'factory'>} [options] - –û–ø—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
   */
  register(name, factoryOrDeps, factoryOrOptions, options = {}) {
    if (this.services.has(name)) {
      this.logger.warn(`Service ${name} is already registered, skipping...`);
      return;
    }

    let factory, dependencies, config;

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç –≤—ã–∑–æ–≤–∞
    if (typeof factoryOrDeps === 'function') {
      // register(name, factory, options)
      factory = factoryOrDeps;
      dependencies = [];
      config = factoryOrOptions || {};
    } else if (Array.isArray(factoryOrDeps)) {
      // register(name, dependencies, factory, options)
      dependencies = factoryOrDeps;
      factory = factoryOrOptions;
      config = options;
    } else {
      throw new Error('Invalid arguments to register()');
    }

    const serviceConfig = {
      factory,
      dependencies: dependencies || [],
      singleton: config.singleton !== false,
      lazy: config.lazy !== false,
      ...config
    };

    this.services.set(name, {
      name,
      config: serviceConfig,
      instance: null,
      initialized: false,
      initOrder: -1
    });

    this.logger.debug(`Service ${name} registered with dependencies: [${dependencies.join(', ')}]`);
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ (alias –¥–ª—è get)
   * @template T
   * @param {string} name - –ò–º—è —Å–µ—Ä–≤–∏—Å–∞
   * @returns {T} –≠–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
   */
  getService(name) {
    return this.get(name);
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
   * @template T
   * @param {string} name - –ò–º—è —Å–µ—Ä–≤–∏—Å–∞
   * @returns {T} –≠–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
   */
  get(name) {
    const serviceInfo = this.services.get(name);
    
    if (!serviceInfo) {
      throw new Error(`Service ${name} is not registered`);
    }

    // –î–ª—è non-singleton —Å–µ—Ä–≤–∏—Å–æ–≤ –≤—Å–µ–≥–¥–∞ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
    if (!serviceInfo.config.singleton) {
      return this._createInstance(serviceInfo);
    }

    // –î–ª—è singleton - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
    if (!serviceInfo.instance) {
      serviceInfo.instance = this._createInstance(serviceInfo);
      serviceInfo.initialized = true;
      serviceInfo.initOrder = this.initCounter++;
    }

    return serviceInfo.instance;
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ —Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
   * @param {ServiceInfo} serviceInfo - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–∏—Å–µ
   * @returns {any} –°–æ–∑–¥–∞–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
   * @private
   */
  _createInstance(serviceInfo) {
    const { name, config } = serviceInfo;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    if (this.initializing.has(name)) {
      const cycle = Array.from(this.initializing).join(' -> ') + ' -> ' + name;
      throw new Error(`Circular dependency detected: ${cycle}`);
    }

    this.initializing.add(name);

    try {
      // –†–∞–∑—Ä–µ—à–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
      const dependencies = config.dependencies.map(depName => {
        this.logger.debug(`Resolving dependency ${depName} for ${name}`);
        return this.get(depName);
      });

      // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä
      this.logger.debug(`Creating instance of ${name}`);
      const instance = config.factory(...dependencies);

      return instance;
    } catch (error) {
      this.logger.error(`Failed to create instance of ${name}:`, error);
      throw error;
    } finally {
      this.initializing.delete(name);
    }
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã
   * @returns {Promise<void>}
   */
  async initializeAll() {
    this.logger.info('Initializing all services...');

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã —Å eager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π
    const eagerServices = Array.from(this.services.values())
      .filter(s => !s.config.lazy);

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º (—Å–Ω–∞—á–∞–ª–∞ —Å–µ—Ä–≤–∏—Å—ã –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π)
    const sorted = this._topologicalSort(eagerServices);

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ –ø–æ—Ä—è–¥–∫—É
    for (const serviceInfo of sorted) {
      try {
        this.logger.debug(`Initializing eager service: ${serviceInfo.name}`);
        
        // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
        const instance = this.get(serviceInfo.name);
        
        // –ï—Å–ª–∏ —É —Å–µ—Ä–≤–∏—Å–∞ –µ—Å—Ç—å –º–µ—Ç–æ–¥ initialize, –≤—ã–∑—ã–≤–∞–µ–º –µ–≥–æ
        if (instance && typeof instance.initialize === 'function') {
          this.logger.debug(`Calling initialize() on ${serviceInfo.name}`);
          await instance.initialize();
        }
      } catch (error) {
        this.logger.error(`Failed to initialize service ${serviceInfo.name}:`, error);
        // –ù–µ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –¥—Ä—É–≥–∏–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏
      }
    }

    this.logger.info('Service initialization completed');
  }

  /**
   * –¢–æ–ø–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤ –ø–æ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º
   * @param {ServiceInfo[]} services - –ú–∞—Å—Å–∏–≤ —Å–µ—Ä–≤–∏—Å–æ–≤ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
   * @returns {ServiceInfo[]} –û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤
   * @private
   */
  _topologicalSort(services) {
    const sorted = [];
    const visited = new Set();
    const visiting = new Set();

    const visit = (serviceInfo) => {
      const { name } = serviceInfo;

      if (visiting.has(name)) {
        throw new Error(`Circular dependency detected involving ${name}`);
      }

      if (visited.has(name)) {
        return;
      }

      visiting.add(name);

      // –ü–æ—Å–µ—â–∞–µ–º –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
      for (const depName of serviceInfo.config.dependencies) {
        const depService = this.services.get(depName);
        if (depService) {
          visit(depService);
        }
      }

      visiting.delete(name);
      visited.add(name);
      sorted.push(serviceInfo);
    };

    for (const service of services) {
      if (!visited.has(service.name)) {
        visit(service);
      }
    }

    return sorted;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–∞—Ö (alias –¥–ª—è getStats)
   * @returns {Object} –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
   */
  getServiceStats() {
    return this.getStats();
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–∞—Ö
   * @returns {Object} –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
   */
  getStats() {
    const totalServices = this.services.size;
    const initializedServices = Array.from(this.services.values())
      .filter(s => s.initialized).length;
    const singletonServices = Array.from(this.services.values())
      .filter(s => s.config.singleton).length;

    return {
      totalServices,
      initializedServices,
      singletonServices,
      services: Array.from(this.services.entries()).map(([name, info]) => ({
        name,
        initialized: info.initialized,
        singleton: info.config.singleton,
        dependencies: info.config.dependencies,
        initOrder: info.initOrder
      }))
    };
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–¥–æ—Ä–æ–≤—å–µ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ (alias –¥–ª—è healthCheck)
   * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è
   */
  async getHealthStatus() {
    return this.healthCheck();
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–¥–æ—Ä–æ–≤—å–µ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
   * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è
   */
  async healthCheck() {
    const health = {
      status: 'healthy',
      allHealthy: true,
      services: {},
      timestamp: new Date().toISOString()
    };

    for (const [name, serviceInfo] of this.services.entries()) {
      try {
        if (serviceInfo.initialized && serviceInfo.instance) {
          // –ï—Å–ª–∏ —É —Å–µ—Ä–≤–∏—Å–∞ –µ—Å—Ç—å –º–µ—Ç–æ–¥ healthCheck, –≤—ã–∑—ã–≤–∞–µ–º –µ–≥–æ
          if (typeof serviceInfo.instance.healthCheck === 'function') {
            const serviceHealth = await serviceInfo.instance.healthCheck();
            health.services[name] = serviceHealth;
            if (serviceHealth.status !== 'ok' && serviceHealth.status !== 'healthy') {
              health.allHealthy = false;
            }
          } else {
            health.services[name] = { status: 'ok', message: 'Service is running' };
          }
        } else {
          health.services[name] = { status: 'not_initialized' };
          health.allHealthy = false;
        }
      } catch (error) {
        health.services[name] = { 
          status: 'error', 
          message: error.message 
        };
        health.status = 'degraded';
        health.allHealthy = false;
      }
    }

    // –ï—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∏, –º–µ–Ω—è–µ–º –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å
    const hasErrors = Object.values(health.services)
      .some(s => s.status === 'error');
    
    if (hasErrors) {
      health.status = 'unhealthy';
    }

    return health;
  }

  /**
   * –û—á–∏—â–∞–µ—Ç –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã (–¥–ª—è —Ç–µ—Å—Ç–æ–≤)
   */
  clear() {
    this.services.clear();
    this.initializing.clear();
    this.initCounter = 0;
  }

  /**
   * –í—ã–∫–ª—é—á–∞–µ—Ç –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã (–≤—ã–∑—ã–≤–∞–µ—Ç shutdown –µ—Å–ª–∏ –µ—Å—Ç—å)
   * @returns {Promise<void>}
   */
  async closeAll() {
    return this.shutdown();
  }

  /**
   * –í—ã–∫–ª—é—á–∞–µ—Ç –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã (–≤—ã–∑—ã–≤–∞–µ—Ç shutdown –µ—Å–ª–∏ –µ—Å—Ç—å)
   * @returns {Promise<void>}
   */
  async shutdown() {
    this.logger.info('Shutting down all services...');

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
    const initializedServices = Array.from(this.services.values())
      .filter(s => s.initialized && s.instance)
      .sort((a, b) => b.initOrder - a.initOrder);

    for (const serviceInfo of initializedServices) {
      try {
        if (typeof serviceInfo.instance.shutdown === 'function') {
          this.logger.debug(`Shutting down service: ${serviceInfo.name}`);
          await serviceInfo.instance.shutdown();
        }
      } catch (error) {
        this.logger.error(`Error shutting down ${serviceInfo.name}:`, error);
      }
    }

    this.logger.info('All services shutdown complete');
  }
}

// üçÑ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ö–õ–ê–°–°, –∞ –Ω–µ singleton —ç–∫–∑–µ–º–ø–ª—è—Ä
module.exports = ServiceManager;
