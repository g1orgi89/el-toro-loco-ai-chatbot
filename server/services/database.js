/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö MongoDB
 * @file server/services/database.js
 */

const mongoose = require('mongoose');
const logger = require('../utils/logger');

/**
 * @typedef {Object} ConnectionStatus
 * @property {string} state - –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
 * @property {string} host - –•–æ—Å—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
 * @property {string} name - –ò–º—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
 * @property {boolean} isConnected - –ü–æ–¥–∫–ª—é—á–µ–Ω–∞ –ª–∏ –ë–î
 * @property {number} readyState - –ß–∏—Å–ª–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
 */

/**
 * @typedef {Object} HealthCheckResult
 * @property {string} status - –°—Ç–∞—Ç—É—Å –ø—Ä–æ–≤–µ—Ä–∫–∏ (ok/error)
 * @property {string} message - –°–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
 * @property {ConnectionStatus} details - –î–µ—Ç–∞–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
 * @property {string} [error] - –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
 */

/**
 * @class DatabaseService
 * @description –°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ MongoDB
 */
class DatabaseService {
  constructor() {
    this.connection = null;
    this.isConnected = false;
    this.reconnectAttempts = 0;
    this.maxReconnectAttempts = 5;
    this.reconnectDelay = 1000; // 1 —Å–µ–∫—É–Ω–¥–∞
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è - –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    this.connectionOptions = {
      useNewUrlParser: true,
      useUnifiedTopology: true,
      serverSelectionTimeoutMS: 10000, // 10 —Å–µ–∫—É–Ω–¥
      socketTimeoutMS: 45000,
      maxPoolSize: 10,
      minPoolSize: 1,
      maxIdleTimeMS: 30000,
      // –£–¥–∞–ª—è–µ–º –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –æ–ø—Ü–∏–∏
      // bufferMaxEntries: 0,  // –£–î–ê–õ–ï–ù–û - –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è
      // bufferCommands: false // –£–î–ê–õ–ï–ù–û - –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è
    };
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    this.setupEventHandlers();
  }

  /**
   * –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è MongoDB
   */
  setupEventHandlers() {
    mongoose.connection.on('connected', () => {
      this.isConnected = true;
      this.reconnectAttempts = 0;
      logger.info('‚úÖ MongoDB connected successfully');
    });

    mongoose.connection.on('error', (error) => {
      this.isConnected = false;
      logger.error('‚ùå MongoDB connection error:', {
        error: error.message,
        code: error.code,
        codeName: error.codeName
      });
    });

    mongoose.connection.on('disconnected', () => {
      this.isConnected = false;
      logger.warn('‚ö†Ô∏è MongoDB disconnected');
      this.handleReconnect();
    });

    mongoose.connection.on('reconnected', () => {
      this.isConnected = true;
      this.reconnectAttempts = 0;
      logger.info('üîÑ MongoDB reconnected');
    });

    // Graceful shutdown
    process.on('SIGINT', this.gracefulShutdown.bind(this));
    process.on('SIGTERM', this.gracefulShutdown.bind(this));
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
   */
  async handleReconnect() {
    if (this.reconnectAttempts >= this.maxReconnectAttempts) {
      logger.error(`‚ùå Max reconnection attempts (${this.maxReconnectAttempts}) reached`);
      return;
    }

    this.reconnectAttempts++;
    logger.info(`üîÑ Attempting to reconnect to MongoDB (attempt ${this.reconnectAttempts}/${this.maxReconnectAttempts})`);
    
    setTimeout(() => {
      mongoose.connect(process.env.MONGODB_URI, this.connectionOptions).catch(error => {
        logger.error(`‚ùå Reconnection attempt ${this.reconnectAttempts} failed:`, error.message);
      });
    }, this.reconnectDelay * this.reconnectAttempts);
  }

  /**
   * –ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö MongoDB
   * @param {string} [uri] - URI –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB
   * @returns {Promise<mongoose.Connection>}
   */
  async connect(uri) {
    try {
      const mongoUri = uri || process.env.MONGODB_URI || 'mongodb://localhost:27017/shrooms-support';
      
      // –°–∫—Ä—ã–≤–∞–µ–º –ø–∞—Ä–æ–ª—å –≤ –ª–æ–≥–∞—Ö
      const logUri = mongoUri.replace(/:[^:]*@/, ':***@');
      logger.info(`üì° Attempting to connect to MongoDB: ${logUri}`);
      
      // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å
      if (mongoose.connection.readyState !== 0) {
        await mongoose.disconnect();
      }

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
      await mongoose.connect(mongoUri, this.connectionOptions);
      
      this.connection = mongoose.connection;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
      await this.connection.db.admin().ping();
      
      logger.info('‚úÖ Database service initialized successfully');
      
      return this.connection;
    } catch (error) {
      this.isConnected = false;
      logger.error('‚ùå Database connection failed:', {
        error: error.message,
        code: error.code,
        uri: uri?.replace(/:[^:]*@/, ':***@') || 'default'
      });
      
      // –ù–µ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É —Å—Ä–∞–∑—É, –ø–æ–ø—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
      this.handleReconnect();
      throw error;
    }
  }

  /**
   * –û—Ç–∫–ª—é—á–∞–µ—Ç—Å—è –æ—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
   * @returns {Promise<void>}
   */
  async disconnect() {
    try {
      if (this.connection && this.isConnected) {
        await mongoose.disconnect();
        this.isConnected = false;
        logger.info('‚úÖ MongoDB connection closed gracefully');
      }
    } catch (error) {
      logger.error('‚ùå Error closing MongoDB connection:', error.message);
      throw error;
    }
  }

  /**
   * Graceful shutdown –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
   * @param {string} signal - –°–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
   */
  async gracefulShutdown(signal) {
    logger.info(`üîÑ Received ${signal}, shutting down gracefully`);
    try {
      await this.disconnect();
      process.exit(0);
    } catch (error) {
      logger.error('‚ùå Error during graceful shutdown:', error.message);
      process.exit(1);
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
   * @returns {boolean}
   */
  isConnectedToDB() {
    return this.isConnected && mongoose.connection.readyState === 1;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
   * @returns {ConnectionStatus}
   */
  getConnectionStatus() {
    const state = mongoose.connection.readyState;
    const states = {
      0: 'disconnected',
      1: 'connected',
      2: 'connecting',
      3: 'disconnecting'
    };

    return {
      state: states[state] || 'unknown',
      host: mongoose.connection.host || 'unknown',
      name: mongoose.connection.name || 'unknown',
      isConnected: this.isConnected,
      readyState: state
    };
  }

  /**
   * –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É –∑–¥–æ—Ä–æ–≤—å—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
   * @returns {Promise<HealthCheckResult>}
   */
  async healthCheck() {
    try {
      const status = this.getConnectionStatus();
      
      if (!this.isConnectedToDB()) {
        return {
          status: 'error',
          message: `Database not connected. Current state: ${status.state}`,
          details: status
        };
      }

      // Ping –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      await mongoose.connection.db.admin().ping();
      
      return {
        status: 'ok',
        message: 'Database is healthy and responding',
        details: status
      };
    } catch (error) {
      logger.error('Database health check failed:', error.message);
      return {
        status: 'error',
        message: 'Database health check failed',
        error: error.message,
        details: this.getConnectionStatus()
      };
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
   * @returns {Promise<Object>} –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
   */
  async getStats() {
    try {
      if (!this.isConnectedToDB()) {
        throw new Error('Database not connected');
      }

      const db = mongoose.connection.db;
      const admin = db.admin();
      
      const [dbStats, collections] = await Promise.all([
        db.stats(),
        db.listCollections().toArray()
      ]);

      return {
        database: {
          name: db.databaseName,
          collections: dbStats.collections,
          collectionsList: collections.map(c => c.name),
          objects: dbStats.objects,
          dataSize: this.formatBytes(dbStats.dataSize),
          storageSize: this.formatBytes(dbStats.storageSize),
          indexes: dbStats.indexes,
          indexSize: this.formatBytes(dbStats.indexSize)
        },
        connection: this.getConnectionStatus()
      };
    } catch (error) {
      logger.error('Failed to get database stats:', error.message);
      throw error;
    }
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –±–∞–π—Ç—ã –≤ —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
   * @param {number} bytes - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–π—Ç
   * @returns {string} –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
   */
  formatBytes(bytes) {
    if (bytes === 0) return '0 Bytes';
    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –∫–æ–ª–ª–µ–∫—Ü–∏–π
   * @returns {Promise<void>}
   */
  async createIndexes() {
    try {
      if (!this.isConnectedToDB()) {
        throw new Error('Database not connected');
      }

      logger.info('üìã Creating database indexes...');
      
      // –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π
      await mongoose.connection.collection('messages').createIndex({ 
        conversationId: 1, 
        createdAt: 1 
      });
      
      // –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤
      await mongoose.connection.collection('conversations').createIndex({ 
        userId: 1, 
        lastActivityAt: -1 
      });
      
      // –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è —Ç–∏–∫–µ—Ç–æ–≤
      await mongoose.connection.collection('tickets').createIndex({ 
        ticketId: 1 
      });
      await mongoose.connection.collection('tickets').createIndex({ 
        userId: 1,
        status: 1,
        createdAt: -1 
      });
      
      logger.info('‚úÖ Database indexes created successfully');
    } catch (error) {
      logger.error('‚ùå Failed to create database indexes:', error.message);
      throw error;
    }
  }

  /**
   * –û—á–∏—â–∞–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ—Å—Ç–æ–≤)
   * @param {boolean} [confirm=false] - –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—á–∏—Å—Ç–∫–∏
   * @returns {Promise<void>}
   */
  async clearDatabase(confirm = false) {
    if (!confirm) {
      throw new Error('Database clearing requires explicit confirmation');
    }

    if (process.env.NODE_ENV === 'production') {
      throw new Error('Cannot clear database in production environment');
    }

    try {
      if (!this.isConnectedToDB()) {
        throw new Error('Database not connected');
      }

      logger.warn('‚ö†Ô∏è Clearing database...');
      await mongoose.connection.db.dropDatabase();
      logger.info('‚úÖ Database cleared successfully');
    } catch (error) {
      logger.error('‚ùå Failed to clear database:', error.message);
      throw error;
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ —Å–µ—Ä–≤–∏—Å–∞
module.exports = new DatabaseService();