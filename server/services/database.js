/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö MongoDB
 * @file server/services/database.js
 */

const mongoose = require('mongoose');
const logger = require('../utils/logger');

/**
 * @class DatabaseService
 * @description –°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ MongoDB
 */
class DatabaseService {
  constructor() {
    this.connection = null;
    this.isConnected = false;
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    this.connectionOptions = {
      useNewUrlParser: true,
      useUnifiedTopology: true,
      serverSelectionTimeoutMS: 5000, // –¢–∞–π–º–∞—É—Ç –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–µ—Ä–≤–µ—Ä–∞
      socketTimeoutMS: 45000, // –¢–∞–π–º–∞—É—Ç —Å–æ–∫–µ—Ç–∞
      maxPoolSize: 10, // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –≤ –ø—É–ª–µ
      minPoolSize: 1,  // –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –≤ –ø—É–ª–µ
      maxIdleTimeMS: 30000, // –í—Ä–µ–º—è –ø—Ä–æ—Å—Ç–æ—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
      bufferMaxEntries: 0 // –û—Ç–∫–ª—é—á–∏—Ç—å –±—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏—é
    };
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π MongoDB
    this.setupEventHandlers();
  }

  /**
   * –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è MongoDB
   */
  setupEventHandlers() {
    mongoose.connection.on('connected', () => {
      this.isConnected = true;
      logger.info('‚úÖ MongoDB connected successfully');
    });

    mongoose.connection.on('error', (error) => {
      this.isConnected = false;
      logger.error('‚ùå MongoDB connection error:', error);
    });

    mongoose.connection.on('disconnected', () => {
      this.isConnected = false;
      logger.warn('‚ö†Ô∏è MongoDB disconnected');
    });

    mongoose.connection.on('reconnected', () => {
      this.isConnected = true;
      logger.info('üîÑ MongoDB reconnected');
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    process.on('SIGINT', async () => {
      await this.disconnect();
      process.exit(0);
    });

    process.on('SIGTERM', async () => {
      await this.disconnect();
      process.exit(0);
    });
  }

  /**
   * –ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö MongoDB
   * @param {string} [uri] - URI –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB
   * @returns {Promise<void>}
   */
  async connect(uri) {
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π URI –∏–ª–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è - –ò–°–ü–†–ê–í–õ–ï–ù–û –Ω–∞ localhost
      const mongoUri = uri || process.env.MONGODB_URI || 'mongodb://localhost:27017/shrooms-support';
      
      logger.info(`Connecting to MongoDB: ${mongoUri.replace(/:[^:]*@/, ':***@')}`);
      
      // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
      await mongoose.connect(mongoUri, this.connectionOptions);
      
      this.connection = mongoose.connection;
      logger.info('‚úÖ Database service initialized');
      
      return this.connection;
    } catch (error) {
      this.isConnected = false;
      logger.error('‚ùå Database connection failed:', error);
      throw error;
    }
  }

  /**
   * –û—Ç–∫–ª—é—á–∞–µ—Ç—Å—è –æ—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
   * @returns {Promise<void>}
   */
  async disconnect() {
    try {
      if (this.connection && this.isConnected) {
        await mongoose.connection.close();
        this.isConnected = false;
        logger.info('‚úÖ MongoDB connection closed');
      }
    } catch (error) {
      logger.error('‚ùå Error closing MongoDB connection:', error);
      throw error;
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
   * @returns {boolean} –ü–æ–¥–∫–ª—é—á–µ–Ω–∞ –ª–∏ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
   */
  isConnectedToDB() {
    return this.isConnected && mongoose.connection.readyState === 1;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
   * @returns {Object} –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
   */
  getConnectionStatus() {
    const state = mongoose.connection.readyState;
    const states = {
      0: 'disconnected',
      1: 'connected',
      2: 'connecting',
      3: 'disconnecting'
    };

    return {
      state: states[state],
      host: mongoose.connection.host,
      name: mongoose.connection.name,
      isConnected: this.isConnected,
      readyState: state
    };
  }

  /**
   * –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É –∑–¥–æ—Ä–æ–≤—å—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
   * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏
   */
  async healthCheck() {
    try {
      if (!this.isConnectedToDB()) {
        return {
          status: 'error',
          message: 'Database not connected',
          details: this.getConnectionStatus()
        };
      }

      // –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
      await mongoose.connection.db.admin().ping();
      
      return {
        status: 'ok',
        message: 'Database is healthy',
        details: this.getConnectionStatus()
      };
    } catch (error) {
      logger.error('Database health check failed:', error);
      return {
        status: 'error',
        message: 'Database health check failed',
        error: error.message,
        details: this.getConnectionStatus()
      };
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
   * @returns {Promise<Object>} –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
   */
  async getStats() {
    try {
      if (!this.isConnectedToDB()) {
        throw new Error('Database not connected');
      }

      const db = mongoose.connection.db;
      const admin = db.admin();
      
      // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      const [dbStats, serverStatus] = await Promise.all([
        db.stats(),
        admin.serverStatus()
      ]);

      return {
        database: {
          name: db.databaseName,
          collections: dbStats.collections,
          objects: dbStats.objects,
          dataSize: dbStats.dataSize,
          storageSize: dbStats.storageSize,
          indexes: dbStats.indexes,
          indexSize: dbStats.indexSize
        },
        server: {
          version: serverStatus.version,
          uptime: serverStatus.uptime,
          connections: serverStatus.connections,
          memory: serverStatus.mem
        },
        connection: this.getConnectionStatus()
      };
    } catch (error) {
      logger.error('Failed to get database stats:', error);
      throw error;
    }
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –∫–æ–ª–ª–µ–∫—Ü–∏–π (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
   * @returns {Promise<void>}
   */
  async createIndexes() {
    try {
      if (!this.isConnectedToDB()) {
        throw new Error('Database not connected');
      }

      logger.info('Creating database indexes...');
      
      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∏–Ω–¥–µ–∫—Å—ã
      // –ü—Ä–∏–º–µ—Ä:
      // await mongoose.connection.collection('messages').createIndex({ conversationId: 1, createdAt: 1 });
      // await mongoose.connection.collection('conversations').createIndex({ userId: 1, startedAt: -1 });
      
      logger.info('‚úÖ Database indexes created successfully');
    } catch (error) {
      logger.error('‚ùå Failed to create database indexes:', error);
      throw error;
    }
  }

  /**
   * –í—ã–ø–æ–ª–Ω—è–µ—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
   * @returns {Promise<void>}
   */
  async runMigrations() {
    try {
      if (!this.isConnectedToDB()) {
        throw new Error('Database not connected');
      }

      logger.info('Running database migrations...');
      
      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏
      // –ü—Ä–∏–º–µ—Ä –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–ª–ª–µ–∫—Ü–∏–π
      const collections = await mongoose.connection.db.listCollections().toArray();
      const collectionNames = collections.map(col => col.name);
      
      logger.info(`Found collections: ${collectionNames.join(', ')}`);
      
      logger.info('‚úÖ Database migrations completed successfully');
    } catch (error) {
      logger.error('‚ùå Failed to run database migrations:', error);
      throw error;
    }
  }

  /**
   * –û—á–∏—â–∞–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤)
   * @param {boolean} [confirm=false] - –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—á–∏—Å—Ç–∫–∏
   * @returns {Promise<void>}
   */
  async clearDatabase(confirm = false) {
    if (!confirm) {
      throw new Error('Database clearing requires explicit confirmation');
    }

    if (process.env.NODE_ENV === 'production') {
      throw new Error('Cannot clear database in production environment');
    }

    try {
      if (!this.isConnectedToDB()) {
        throw new Error('Database not connected');
      }

      logger.warn('‚ö†Ô∏è Clearing database...');
      await mongoose.connection.db.dropDatabase();
      logger.info('‚úÖ Database cleared successfully');
    } catch (error) {
      logger.error('‚ùå Failed to clear database:', error);
      throw error;
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ —Å–µ—Ä–≤–∏—Å–∞
module.exports = new DatabaseService();