/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 * –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –±—ã—Å—Ç—Ä—ã–µ —Ä–µ—à–µ–Ω–∏—è –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º —Ç–∏–∫–µ—Ç–æ–≤
 * @file server/services/diagnostics.js
 */

const { DIAGNOSTIC_QUESTIONS, QUICK_SOLUTIONS } = require('../config/prompts-fixed');
const logger = require('../utils/logger');

/**
 * @typedef {Object} DiagnosticResult
 * @property {string} problemType - –¢–∏–ø –ø—Ä–æ–±–ª–µ–º—ã
 * @property {string[]} questions - –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã
 * @property {string[]} solutions - –ë—ã—Å—Ç—Ä—ã–µ —Ä–µ—à–µ–Ω–∏—è
 * @property {boolean} needsTicket - –¢—Ä–µ–±—É–µ—Ç—Å—è –ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∏–∫–µ—Ç–∞
 * @property {string} response - –ì–æ—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */

/**
 * –ö–ª–∞—Å—Å –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 */
class DiagnosticsService {
  constructor() {
    // –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –ø—Ä–æ–±–ª–µ–º—ã
    this.problemPatterns = {
      wallet_connection: [
        /wallet.*connect/i,
        /connect.*wallet/i,
        /connection.*fail/i,
        /–º–æ–∂—Å[—Ç—á]–∞—Ç—å.*–∫–æ—à/i,
        /–ø–æ–¥–∫–ª—é—á.*–∫–æ—à/i,
        /conectar.*billetera/i,
        /cartera.*conectar/i
      ],
      
      transaction_stuck: [
        /transaction.*stuck/i,
        /tx.*pending/i,
        /—Ç—Ä–∞–Ω–∑–∞–∫—Ü.*–∑–∞–≤–µ—Ä—à/i,
        /—Ç—Ä–∞–Ω–∑–∞–∫—Ü.*–∑–∞—Å—Ç—Ä/i,
        /transacci√≥n.*pendiente/i,
        /transacci√≥n.*atascada/i
      ],
      
      tokens_missing: [
        /tokens.*disappear/i,
        /missing.*token/i,
        /tokens.*gone/i,
        /—Ç–æ–∫–µ–Ω.*–∏—Å—á–µ–∑/i,
        /—Ç–æ–∫–µ–Ω.*–ø—Ä–æ–ø–∞–ª/i,
        /tokens.*desapareci/i,
        /perdido.*token/i
      ],
      
      staking_issues: [
        /stak.*problem/i,
        /stak.*issue/i,
        /—Å—Ç–µ–π–∫.*–ø—Ä–æ–±–ª–µ–º/i,
        /—Å—Ç–µ–π–∫.*–æ—à–∏–±–∫/i,
        /problema.*staking/i,
        /error.*staking/i
      ],
      
      farming_issues: [
        /farm.*not.*work/i,
        /farming.*problem/i,
        /—Ñ–∞—Ä–º.*–Ω–µ.*—Ä–∞–±–æ—Ç/i,
        /—Ñ–∞—Ä–º.*–ø—Ä–æ–±–ª–µ–º/i,
        /farming.*problema/i,
        /problema.*farming/i
      ]
    };
    
    // –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–∫–µ—Ç–∞
    this.ticketKeywords = [
      // English
      'urgent', 'help', 'error', 'bug', 'problem', 'issue', 'failed', 'broken',
      // Russian  
      '—Å—Ä–æ—á–Ω–æ', '–ø–æ–º–æ—â—å', '–æ—à–∏–±–∫–∞', '–±–∞–≥', '–ø—Ä–æ–±–ª–µ–º–∞', '–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç', '—Å–ª–æ–º–∞–ª',
      // Spanish
      'urgente', 'ayuda', 'error', 'problema', 'bug', 'fallo', 'roto'
    ];
  }

  /**
   * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
   * @param {string} message - –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {string} language - –Ø–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (en, ru, es)
   * @returns {DiagnosticResult} –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
   */
  async diagnose(message, language = 'en') {
    try {
      const problemType = this.identifyProblemType(message);
      const needsTicket = this.shouldCreateTicket(message, problemType);
      
      if (!problemType) {
        return {
          problemType: null,
          questions: [],
          solutions: [],
          needsTicket: needsTicket,
          response: this.generateGenericResponse(language, needsTicket)
        };
      }
      
      const questions = this.getQuestions(problemType, language);
      const solutions = this.getSolutions(problemType, language);
      const response = this.generateDiagnosticResponse(
        problemType, 
        questions, 
        solutions, 
        language, 
        needsTicket
      );
      
      logger.info(`Diagnosed problem: ${problemType}, needsTicket: ${needsTicket}`);
      
      return {
        problemType,
        questions,
        solutions,
        needsTicket,
        response
      };
    } catch (error) {
      logger.error(`Diagnostics error: ${error.message}`);
      return {
        problemType: null,
        questions: [],
        solutions: [],
        needsTicket: true,
        response: this.generateErrorResponse(language)
      };
    }
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –ø—Ä–æ–±–ª–µ–º—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–æ–±—â–µ–Ω–∏—è
   * @param {string} message - –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @returns {string|null} –¢–∏–ø –ø—Ä–æ–±–ª–µ–º—ã –∏–ª–∏ null
   */
  identifyProblemType(message) {
    for (const [problemType, patterns] of Object.entries(this.problemPatterns)) {
      if (patterns.some(pattern => pattern.test(message))) {
        return problemType;
      }
    }
    return null;
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ç–∏–∫–µ—Ç
   * @param {string} message - –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è  
   * @param {string|null} problemType - –¢–∏–ø –ø—Ä–æ–±–ª–µ–º—ã
   * @returns {boolean} –ù—É–∂–Ω–æ –ª–∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ç–∏–∫–µ—Ç
   */
  shouldCreateTicket(message, problemType) {
    // –í—Å–µ–≥–¥–∞ —Å–æ–∑–¥–∞–µ–º —Ç–∏–∫–µ—Ç –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø—Ä–æ–±–ª–µ–º
    const alwaysTicketTypes = ['tokens_missing', 'transaction_stuck'];
    if (alwaysTicketTypes.includes(problemType)) {
      return true;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
    const hasTicketKeywords = this.ticketKeywords.some(keyword =>
      message.toLowerCase().includes(keyword.toLowerCase())
    );
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ (—á–∞—Å—ã, –¥–Ω–∏)
    const hasTimeReference = /(\d+\s*(hour|hours|—á–∞—Å|—á–∞—Å–∞|—á–∞—Å–æ–≤|hora|horas|day|days|–¥–µ–Ω—å|–¥–Ω—è|–¥–Ω–µ–π|d√≠a|d√≠as))/i.test(message);
    
    return hasTicketKeywords || hasTimeReference || problemType !== null;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è —Ç–∏–ø–∞ –ø—Ä–æ–±–ª–µ–º—ã
   * @param {string} problemType - –¢–∏–ø –ø—Ä–æ–±–ª–µ–º—ã
   * @param {string} language - –Ø–∑—ã–∫
   * @returns {string[]} –°–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤
   */
  getQuestions(problemType, language) {
    return DIAGNOSTIC_QUESTIONS[problemType]?.[language] || [];
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –±—ã—Å—Ç—Ä—ã–µ —Ä–µ—à–µ–Ω–∏—è –¥–ª—è —Ç–∏–ø–∞ –ø—Ä–æ–±–ª–µ–º—ã
   * @param {string} problemType - –¢–∏–ø –ø—Ä–æ–±–ª–µ–º—ã  
   * @param {string} language - –Ø–∑—ã–∫
   * @returns {string[]} –°–ø–∏—Å–æ–∫ —Ä–µ—à–µ–Ω–∏–π
   */
  getSolutions(problemType, language) {
    return QUICK_SOLUTIONS[problemType]?.[language] || [];
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç —Å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π
   * @param {string} problemType - –¢–∏–ø –ø—Ä–æ–±–ª–µ–º—ã
   * @param {string[]} questions - –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã
   * @param {string[]} solutions - –ë—ã—Å—Ç—Ä—ã–µ —Ä–µ—à–µ–Ω–∏—è
   * @param {string} language - –Ø–∑—ã–∫
   * @param {boolean} needsTicket - –ù—É–∂–Ω–æ –ª–∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ç–∏–∫–µ—Ç
   * @returns {string} –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
   */
  generateDiagnosticResponse(problemType, questions, solutions, language, needsTicket) {
    const templates = {
      en: {
        greeting: "üçÑ I see you're having some trouble in our mycelial network! Let me help identify the issue.",
        solutions_intro: "Here are some quick solutions you can try:",
        questions_intro: "To better diagnose the problem, please tell me:",
        ticket_will_create: "I'll create a support ticket for our mushroom experts to investigate further.",
        ticket_not_needed: "Try these solutions first, and if the problem persists, I can create a support ticket for you."
      },
      ru: {
        greeting: "üçÑ –í–∏–∂—É, —á—Ç–æ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏ –≤ –Ω–∞—à–µ–π –≥—Ä–∏–±–Ω–æ–π —Å–µ—Ç–∏! –î–∞–≤–∞–π—Ç–µ —Ä–∞–∑–±–µ—Ä–µ–º—Å—è —Å –ø—Ä–æ–±–ª–µ–º–æ–π.",
        solutions_intro: "–í–æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –±—ã—Å—Ç—Ä—ã—Ö —Ä–µ—à–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å:",
        questions_intro: "–î–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ –º–Ω–µ:",
        ticket_will_create: "–Ø —Å–æ–∑–¥–∞–º —Ç–∏–∫–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –¥–ª—è –Ω–∞—à–∏—Ö –≥—Ä–∏–±–Ω—ã—Ö —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è.",
        ticket_not_needed: "–°–Ω–∞—á–∞–ª–∞ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —ç—Ç–∏ —Ä–µ—à–µ–Ω–∏—è, –∏ –µ—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—Å—è, —è –º–æ–≥—É —Å–æ–∑–¥–∞—Ç—å —Ç–∏–∫–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏."
      },
      es: {
        greeting: "üçÑ ¬°Veo que tienes problemas en nuestra red micelial! D√©jame ayudarte a identificar el problema.",
        solutions_intro: "Aqu√≠ tienes algunas soluciones r√°pidas que puedes probar:",
        questions_intro: "Para diagnosticar mejor el problema, dime:",
        ticket_will_create: "Crear√© un ticket de soporte para que nuestros expertos hongos investiguen m√°s a fondo.",
        ticket_not_needed: "Prueba estas soluciones primero, y si el problema persiste, puedo crear un ticket de soporte para ti."
      }
    };

    const t = templates[language] || templates.en;
    let response = t.greeting + '\n\n';

    // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ—à–µ–Ω–∏—è
    if (solutions.length > 0) {
      response += t.solutions_intro + '\n';
      solutions.forEach((solution, index) => {
        response += `${index + 1}. ${solution}\n`;
      });
      response += '\n';
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    if (questions.length > 0 && !needsTicket) {
      response += t.questions_intro + '\n';
      questions.forEach((question, index) => {
        response += `‚Ä¢ ${question}\n`;
      });
      response += '\n';
    }

    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∏–∫–µ—Ç–µ
    if (needsTicket) {
      response += t.ticket_will_create;
    } else {
      response += t.ticket_not_needed;
    }

    return response;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–±—â–∏–π –æ—Ç–≤–µ—Ç –∫–æ–≥–¥–∞ —Ç–∏–ø –ø—Ä–æ–±–ª–µ–º—ã –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω
   * @param {string} language - –Ø–∑—ã–∫
   * @param {boolean} needsTicket - –ù—É–∂–Ω–æ –ª–∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ç–∏–∫–µ—Ç
   * @returns {string} –û—Ç–≤–µ—Ç
   */
  generateGenericResponse(language, needsTicket) {
    const templates = {
      en: needsTicket ? 
        "üçÑ I understand you're experiencing an issue. Let me create a support ticket for our mushroom experts to help you properly." :
        "üçÑ Hi there! I'm Sporus, your friendly mushroom assistant. How can I help you today?",
      ru: needsTicket ?
        "üçÑ –ü–æ–Ω–∏–º–∞—é, —á—Ç–æ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞. –î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–º —Ç–∏–∫–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏, —á—Ç–æ–±—ã –Ω–∞—à–∏ –≥—Ä–∏–±–Ω—ã–µ —ç–∫—Å–ø–µ—Ä—Ç—ã —Å–º–æ–≥–ª–∏ –ø–æ–º–æ—á—å –≤–∞–º –¥–æ–ª–∂–Ω—ã–º –æ–±—Ä–∞–∑–æ–º." :
        "üçÑ –ü—Ä–∏–≤–µ—Ç! –Ø Sporus, –≤–∞—à –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –≥—Ä–∏–±–Ω–æ–π –ø–æ–º–æ—â–Ω–∏–∫. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?",
      es: needsTicket ?
        "üçÑ Entiendo que tienes un problema. Perm√≠teme crear un ticket de soporte para que nuestros expertos hongos te ayuden adecuadamente." :
        "üçÑ ¬°Hola! Soy Sporus, tu amistoso asistente hongo. ¬øC√≥mo puedo ayudarte hoy?"
    };

    return templates[language] || templates.en;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
   * @param {string} language - –Ø–∑—ã–∫
   * @returns {string} –û—Ç–≤–µ—Ç
   */
  generateErrorResponse(language) {
    const templates = {
      en: "üçÑ I'm having trouble analyzing your message right now. Let me create a support ticket for our experts to assist you.",
      ru: "üçÑ –£ –º–µ–Ω—è –≤–æ–∑–Ω–∏–∫–ª–∏ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏ —Å –∞–Ω–∞–ª–∏–∑–æ–º –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–º —Ç–∏–∫–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –¥–ª—è –Ω–∞—à–∏—Ö —ç–∫—Å–ø–µ—Ä—Ç–æ–≤.",
      es: "üçÑ Tengo problemas para analizar tu mensaje ahora. Perm√≠teme crear un ticket de soporte para que nuestros expertos te ayuden."
    };

    return templates[language] || templates.en;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π
   * @param {string} problemType - –¢–∏–ø –ø—Ä–æ–±–ª–µ–º—ã
   * @param {string} message - –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @returns {boolean} –Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π
   */
  isCriticalProblem(problemType, message) {
    const criticalPatterns = [
      /urgent/i,
      /critical/i,
      /—Å—Ä–æ—á–Ω–æ/i,
      /–∫—Ä–∏—Ç–∏—á–Ω–æ/i,
      /urgente/i,
      /cr√≠tico/i,
      /lost.*money/i,
      /–ø–æ—Ç–µ—Ä—è–ª.*–¥–µ–Ω—å–≥–∏/i,
      /perd√≠.*dinero/i
    ];

    return criticalPatterns.some(pattern => pattern.test(message)) ||
           ['tokens_missing', 'transaction_stuck'].includes(problemType);
  }
}

module.exports = new DiagnosticsService();
