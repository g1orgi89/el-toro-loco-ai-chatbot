/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑–æ–π –∑–Ω–∞–Ω–∏–π (Qdrant)
 * @file server/services/vectorStore.js
 */

const logger = require('../utils/logger');

/**
 * @typedef {Object} SearchResult
 * @property {string} content - –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
 * @property {number} score - –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å (0-1)
 * @property {Object} metadata - –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
 * @property {string} id - ID –¥–æ–∫—É–º–µ–Ω—Ç–∞
 */

/**
 * @typedef {Object} Document
 * @property {string} id - –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–æ–∫—É–º–µ–Ω—Ç–∞
 * @property {string} content - –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
 * @property {Object} [metadata] - –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
 * @property {number[]} [vector] - –í–µ–∫—Ç–æ—Ä —ç–º–±–µ–¥–¥–∏–Ω–≥–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
 */

/**
 * @typedef {Object} SearchOptions
 * @property {number} [limit=5] - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
 * @property {string} [language] - –Ø–∑—ã–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
 * @property {number} [scoreThreshold=0.7] - –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
 * @property {Object} [filters] - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
 */

/**
 * @class VectorStoreService
 * @description –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑–æ–π –∑–Ω–∞–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ Qdrant
 */
class VectorStoreService {
  constructor() {
    this.initialized = false;
    this.client = null;
    this.collectionName = 'shrooms_knowledge';
    this.vectorSize = 1536; // –†–∞–∑–º–µ—Ä –≤–µ–∫—Ç–æ—Ä–∞ –¥–ª—è text-embedding-ada-002
    this.config = {
      url: process.env.VECTOR_DB_URL || 'http://localhost:6333',
      timeout: parseInt(process.env.VECTOR_DB_TIMEOUT) || 10000,
      batchSize: parseInt(process.env.VECTOR_BATCH_SIZE) || 100,
      searchLimit: parseInt(process.env.VECTOR_SEARCH_LIMIT) || 5
    };
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω –ª–∏ RAG
    this.ragEnabled = process.env.ENABLE_RAG !== 'false';
    
    if (!this.ragEnabled) {
      logger.info('‚ö†Ô∏è RAG feature is disabled, VectorStore will run in stub mode');
    }
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Qdrant
   * @returns {Promise<void>}
   */
  async initialize() {
    try {
      if (!this.ragEnabled) {
        logger.info('üìö VectorStore initialized in stub mode (RAG disabled)');
        this.initialized = true;
        return;
      }

      logger.info('üì° Initializing vector store connection...');
      
      // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º qdrant-js —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ RAG –≤–∫–ª—é—á–µ–Ω
      const { QdrantClient } = await import('@qdrant/js-client-rest');
      
      this.client = new QdrantClient({
        url: this.config.url,
        timeout: this.config.timeout
      });

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
      await this.client.getCollections();
      logger.info('‚úÖ Connected to Qdrant successfully');

      // –°–æ–∑–¥–∞–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      await this.ensureCollection();
      
      this.initialized = true;
      logger.info('‚úÖ Vector store initialized successfully');
    } catch (error) {
      logger.error('‚ùå Failed to initialize vector store:', error.message);
      
      // –ï—Å–ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è, —Ä–∞–±–æ—Ç–∞–µ–º –≤ —Ä–µ–∂–∏–º–µ –∑–∞–≥–ª—É—à–∫–∏
      if (error.code === 'ECONNREFUSED' || error.code === 'ENOTFOUND') {
        logger.warn('‚ö†Ô∏è Vector store unavailable, falling back to stub mode');
        this.ragEnabled = false;
        this.initialized = true;
        return;
      }
      
      throw error;
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ —Å–æ–∑–¥–∞–µ—Ç –∫–æ–ª–ª–µ–∫—Ü–∏—é –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
   * @returns {Promise<void>}
   */
  async ensureCollection() {
    try {
      if (!this.ragEnabled || !this.client) {
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
      const collections = await this.client.getCollections();
      const collectionExists = collections.collections.some(
        col => col.name === this.collectionName
      );

      if (!collectionExists) {
        logger.info(`üìö Creating collection: ${this.collectionName}`);
        
        await this.client.createCollection(this.collectionName, {
          vectors: {
            size: this.vectorSize,
            distance: 'Cosine'
          },
          optimizers_config: {
            default_segment_number: 2
          },
          replication_factor: 1
        });

        logger.info(`‚úÖ Collection created: ${this.collectionName}`);
      } else {
        logger.info(`üìö Collection already exists: ${this.collectionName}`);
      }
    } catch (error) {
      logger.error('‚ùå Failed to ensure collection:', error.message);
      throw error;
    }
  }

  /**
   * –ü–æ–∏—Å–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
   * @param {string} query - –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
   * @param {SearchOptions} options - –û–ø—Ü–∏–∏ –ø–æ–∏—Å–∫–∞
   * @returns {Promise<SearchResult[]>} –ú–∞—Å—Å–∏–≤ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
   */
  async search(query, options = {}) {
    try {
      // –ï—Å–ª–∏ RAG –æ—Ç–∫–ª—é—á–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
      if (!this.ragEnabled) {
        logger.info(`üìö Vector search (stub mode): "${query.substring(0, 50)}..."`);
        return [];
      }

      if (!this.initialized || !this.client) {
        logger.warn('Vector store not initialized, returning empty results');
        return [];
      }

      const {
        limit = this.config.searchLimit,
        language,
        scoreThreshold = 0.6,
        filters = {}
      } = options;

      // –ü–æ–ª—É—á–∞–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
      const queryVector = await this.getEmbedding(query);

      // –ì–æ—Ç–æ–≤–∏–º —Ñ–∏–ª—å—Ç—Ä—ã
      const searchFilters = this.buildFilters(language, filters);

      logger.info(`üîç Vector search: "${query.substring(0, 50)}..."`);

      // –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
      const searchResult = await this.client.search(this.collectionName, {
        vector: queryVector,
        limit,
        with_payload: true,
        with_vector: false,
        filter: searchFilters.length > 0 ? { must: searchFilters } : undefined,
        score_threshold: scoreThreshold
      });

      // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
      const results = searchResult.map(item => ({
        id: item.id.toString(),
        content: item.payload.content,
        score: item.score,
        metadata: {
          title: item.payload.title,
          category: item.payload.category,
          language: item.payload.language,
          tags: item.payload.tags || [],
          ...item.payload.metadata
        }
      }));

      logger.info(`‚úÖ Found ${results.length} relevant documents`);
      return results;
    } catch (error) {
      logger.error('‚ùå Vector search failed:', error.message);
      
      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤, —á—Ç–æ–±—ã —á–∞—Ç –ø—Ä–æ–¥–æ–ª–∂–∞–ª —Ä–∞–±–æ—Ç–∞—Ç—å
      return [];
    }
  }

  /**
   * –î–æ–±–∞–≤–ª—è–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç—ã –≤ –≤–µ–∫—Ç–æ—Ä–Ω—É—é –±–∞–∑—É
   * @param {Document[]} documents - –î–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
   * @returns {Promise<string[]>} –ú–∞—Å—Å–∏–≤ ID –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
   */
  async addDocuments(documents) {
    try {
      if (!this.ragEnabled) {
        logger.info(`üìö Adding ${documents.length} documents (stub mode)`);
        return documents.map((_, index) => `stub_${index}`);
      }

      if (!this.initialized || !this.client) {
        throw new Error('Vector store not initialized');
      }

      logger.info(`üìö Adding ${documents.length} documents to vector store`);

      const points = [];
      for (const doc of documents) {
        // –ü–æ–ª—É—á–∞–µ–º –≤–µ–∫—Ç–æ—Ä –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞
        const vector = doc.vector || await this.getEmbedding(doc.content);
        
        // –°–æ–∑–¥–∞–µ–º —Ç–æ—á–∫—É –¥–ª—è Qdrant
        const point = {
          id: doc.id || this.generateId(),
          vector,
          payload: {
            content: doc.content,
            title: doc.metadata?.title || '',
            category: doc.metadata?.category || 'general',
            language: doc.metadata?.language || 'en',
            tags: doc.metadata?.tags || [],
            created_at: new Date().toISOString(),
            ...doc.metadata
          }
        };
        points.push(point);
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã –±–∞—Ç—á–∞–º–∏
      const batches = this.chunkArray(points, this.config.batchSize);
      const addedIds = [];

      for (const batch of batches) {
        await this.client.upsert(this.collectionName, {
          wait: true,
          points: batch
        });
        addedIds.push(...batch.map(p => p.id.toString()));
      }

      logger.info(`‚úÖ Successfully added ${addedIds.length} documents`);
      return addedIds;
    } catch (error) {
      logger.error('‚ùå Failed to add documents:', error.message);
      throw error;
    }
  }

  /**
   * –£–¥–∞–ª—è–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç –∏–∑ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑—ã
   * @param {string} documentId - ID –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
   * @returns {Promise<boolean>} –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏
   */
  async deleteDocument(documentId) {
    try {
      if (!this.ragEnabled) {
        logger.info(`üìö Deleting document ${documentId} (stub mode)`);
        return true;
      }

      if (!this.initialized || !this.client) {
        throw new Error('Vector store not initialized');
      }

      await this.client.delete(this.collectionName, {
        wait: true,
        points: [documentId]
      });

      logger.info(`‚úÖ Document deleted: ${documentId}`);
      return true;
    } catch (error) {
      logger.error(`‚ùå Failed to delete document ${documentId}:`, error.message);
      return false;
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
   * @returns {Promise<Object>} –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
   */
  async getCollectionInfo() {
    try {
      if (!this.ragEnabled || !this.initialized || !this.client) {
        return {
          status: 'stub',
          points_count: 0,
          indexed_vectors_count: 0,
          ram_usage_bytes: 0,
          disk_usage_bytes: 0
        };
      }

      const info = await this.client.getCollection(this.collectionName);
      return info;
    } catch (error) {
      logger.error('‚ùå Failed to get collection info:', error.message);
      throw error;
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–¥–æ—Ä–æ–≤—å–µ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
   * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è
   */
  async healthCheck() {
    try {
      if (!this.ragEnabled) {
        return {
          status: 'ok',
          message: 'Vector store running in stub mode (RAG disabled)',
          mode: 'stub'
        };
      }

      if (!this.initialized) {
        return {
          status: 'error',
          message: 'Vector store not initialized'
        };
      }

      if (!this.client) {
        return {
          status: 'error',
          message: 'Vector store client not available'
        };
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
      await this.client.getCollections();
      
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
      const collectionInfo = await this.getCollectionInfo();

      return {
        status: 'ok',
        message: 'Vector store is healthy and responding',
        mode: 'active',
        collection: this.collectionName,
        documents_count: collectionInfo.points_count || 0,
        config: {
          url: this.config.url,
          vectorSize: this.vectorSize
        }
      };
    } catch (error) {
      logger.error('Vector store health check failed:', error.message);
      return {
        status: 'error',
        message: 'Vector store health check failed',
        error: error.message
      };
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —ç–º–±–µ–¥–¥–∏–Ω–≥ –¥–ª—è —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ OpenAI API
   * @param {string} text - –¢–µ–∫—Å—Ç –¥–ª—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
   * @returns {Promise<number[]>} –í–µ–∫—Ç–æ—Ä —ç–º–±–µ–¥–¥–∏–Ω–≥–∞
   */
  async getEmbedding(text) {
    try {
      // –ï—Å–ª–∏ OpenAI API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –≤–µ–∫—Ç–æ—Ä
      if (!process.env.OPENAI_API_KEY) {
        logger.warn('OPENAI_API_KEY not set, using random vector');
        return Array.from({ length: this.vectorSize }, () => Math.random() - 0.5);
      }

      // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç OpenAI
      const { OpenAI } = await import('openai');
      
      const openai = new OpenAI({
        apiKey: process.env.OPENAI_API_KEY
      });

      const response = await openai.embeddings.create({
        model: process.env.EMBEDDING_MODEL || 'text-embedding-ada-002',
        input: text.substring(0, 8192), // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞
      });

      return response.data[0].embedding;
    } catch (error) {
      logger.error('Failed to get embedding:', error.message);
      
      // Fallback: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –≤–µ–∫—Ç–æ—Ä
      logger.warn('Using random vector as fallback');
      return Array.from({ length: this.vectorSize }, () => Math.random() - 0.5);
    }
  }

  /**
   * –°—Ç—Ä–æ–∏—Ç —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞
   * @param {string} [language] - –Ø–∑—ã–∫ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
   * @param {Object} [additionalFilters] - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
   * @returns {Array} –ú–∞—Å—Å–∏–≤ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è Qdrant
   */
  buildFilters(language, additionalFilters = {}) {
    const filters = [];

    // –§–∏–ª—å—Ç—Ä –ø–æ —è–∑—ã–∫—É
    if (language) {
      filters.push({
        key: 'language',
        match: { value: language }
      });
    }

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
    Object.entries(additionalFilters).forEach(([key, value]) => {
      if (Array.isArray(value)) {
        filters.push({
          key,
          match: { any: value }
        });
      } else {
        filters.push({
          key,
          match: { value }
        });
      }
    });

    return filters;
  }

  /**
   * –†–∞–∑–±–∏–≤–∞–µ—Ç –º–∞—Å—Å–∏–≤ –Ω–∞ –±–∞—Ç—á–∏
   * @param {Array} array - –ú–∞—Å—Å–∏–≤ –¥–ª—è —Ä–∞–∑–±–∏–≤–∫–∏
   * @param {number} batchSize - –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞
   * @returns {Array[]} –ú–∞—Å—Å–∏–≤ –±–∞—Ç—á–µ–π
   */
  chunkArray(array, batchSize) {
    const chunks = [];
    for (let i = 0; i < array.length; i += batchSize) {
      chunks.push(array.slice(i, i + batchSize));
    }
    return chunks;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞
   * @returns {string} –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
   */
  generateId() {
    return `doc_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ª–∏ —Å–µ—Ä–≤–∏—Å
   * @returns {boolean} –°—Ç–∞—Ç—É—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
   */
  isInitialized() {
    return this.initialized;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å–µ—Ä–≤–∏—Å–∞
   * @returns {Object} –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
   */
  getConfig() {
    return {
      ragEnabled: this.ragEnabled,
      initialized: this.initialized,
      collectionName: this.collectionName,
      vectorSize: this.vectorSize,
      url: this.config.url
    };
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ —Å–µ—Ä–≤–∏—Å–∞
module.exports = new VectorStoreService();