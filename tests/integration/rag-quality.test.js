/**
 * @fileoverview –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ RAG –∫–∞—á–µ—Å—Ç–≤–∞
 * @description –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º RAG vs –±–µ–∑ RAG
 * üçÑ –ò–°–ü–†–ê–í–õ–ï–ù–û: –†–∞–±–æ—Ç–∞–µ—Ç —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ API endpoints —Å–µ—Ä–≤–µ—Ä–∞
 */

const fs = require('fs');
const path = require('path');

/**
 * –¢–µ—Å—Ç–æ–≤—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ RAG
 * üçÑ –û–ë–ù–û–í–õ–ï–ù–û: –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –¥–ª—è –≥—Ä–∏–±–Ω–æ–π —Ç–µ–º–∞—Ç–∏–∫–∏
 */
const RAG_TEST_SCENARIOS = {
  // –í–æ–ø—Ä–æ—Å—ã, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç–≤–µ—Ç—ã –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π
  knowledgeBaseQuestions: {
    en: [
      {
        query: "How do I connect Xverse wallet?",
        expectedTopics: ["xverse", "wallet", "connect", "browser", "extension"],
        category: "user-guide",
        shouldFindDocs: true,
        priority: "high"
      },
      {
        query: "What is SHROOMS staking?",
        expectedTopics: ["staking", "shrooms", "rewards", "apy"],
        category: "tokenomics", 
        shouldFindDocs: true,
        priority: "high"
      },
      {
        query: "How does farming work in Shrooms?",
        expectedTopics: ["farming", "liquidity", "rewards", "pools"],
        category: "tokenomics",
        shouldFindDocs: true,
        priority: "medium"
      },
      {
        query: "What is SHROOMS token?",
        expectedTopics: ["shrooms", "token", "cryptocurrency", "stacks"],
        category: "general",
        shouldFindDocs: true,
        priority: "high"
      },
      {
        query: "How to buy SHROOMS tokens?",
        expectedTopics: ["buy", "exchange", "dex", "stacks"],
        category: "general",
        shouldFindDocs: false, // –ú–æ–∂–µ—Ç –Ω–µ –±—ã—Ç—å –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π
        priority: "medium"
      }
    ],
    ru: [
      {
        query: "–ö–∞–∫ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –∫–æ—à–µ–ª–µ–∫ Xverse?",
        expectedTopics: ["xverse", "–∫–æ—à–µ–ª–µ–∫", "–ø–æ–¥–∫–ª—é—á", "—Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ"],
        category: "user-guide",
        shouldFindDocs: true,
        priority: "high"
      },
      {
        query: "–ß—Ç–æ —Ç–∞–∫–æ–µ —Å—Ç–µ–π–∫–∏–Ω–≥ SHROOMS?",
        expectedTopics: ["—Å—Ç–µ–π–∫–∏–Ω–≥", "shrooms", "–≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è"],
        category: "tokenomics",
        shouldFindDocs: true,
        priority: "high"
      },
      {
        query: "–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ñ–∞—Ä–º–∏–Ω–≥ –≤ Shrooms?",
        expectedTopics: ["—Ñ–∞—Ä–º–∏–Ω–≥", "–ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å", "–ø—É–ª—ã"],
        category: "tokenomics",
        shouldFindDocs: true,
        priority: "medium"
      },
      {
        query: "–ß—Ç–æ —Ç–∞–∫–æ–µ —Ç–æ–∫–µ–Ω SHROOMS?",
        expectedTopics: ["shrooms", "—Ç–æ–∫–µ–Ω", "–∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞"],
        category: "general",
        shouldFindDocs: true,
        priority: "high"
      }
    ],
    es: [
      {
        query: "¬øC√≥mo conectar billetera Xverse?",
        expectedTopics: ["xverse", "billetera", "conectar"],
        category: "user-guide",
        shouldFindDocs: true,
        priority: "high"
      },
      {
        query: "¬øQu√© es el staking de SHROOMS?",
        expectedTopics: ["staking", "shrooms", "recompensas"],
        category: "tokenomics",
        shouldFindDocs: false, // –ú–æ–∂–µ—Ç –Ω–µ –±—ã—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –Ω–∞ –∏—Å–ø–∞–Ω—Å–∫–æ–º
        priority: "medium"
      }
    ]
  },

  // –í–æ–ø—Ä–æ—Å—ã, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –ù–ï –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç–≤–µ—Ç–æ–≤ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π
  offTopicQuestions: {
    en: [
      {
        query: "What's the weather today?",
        expectedTopics: [],
        category: "off-topic",
        shouldFindDocs: false,
        priority: "high"
      },
      {
        query: "Tell me about Bitcoin price",
        expectedTopics: [],
        category: "off-topic", 
        shouldFindDocs: false,
        priority: "medium"
      },
      {
        query: "How to cook pasta?",
        expectedTopics: [],
        category: "off-topic",
        shouldFindDocs: false,
        priority: "medium"
      },
      {
        query: "What is machine learning?",
        expectedTopics: [],
        category: "off-topic",
        shouldFindDocs: false,
        priority: "low"
      }
    ],
    ru: [
      {
        query: "–ö–∞–∫–∞—è —Å–µ–≥–æ–¥–Ω—è –ø–æ–≥–æ–¥–∞?",
        expectedTopics: [],
        category: "off-topic",
        shouldFindDocs: false,
        priority: "high"
      },
      {
        query: "–†–∞—Å—Å–∫–∞–∂–∏ –æ —Ü–µ–Ω–µ –±–∏—Ç–∫–æ–∏–Ω–∞",
        expectedTopics: [],
        category: "off-topic",
        shouldFindDocs: false,
        priority: "medium"
      },
      {
        query: "–ö–∞–∫ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å –±–æ—Ä—â?",
        expectedTopics: [],
        category: "off-topic",
        shouldFindDocs: false,
        priority: "low"
      }
    ]
  },

  // –ü–æ–≥—Ä–∞–Ω–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏
  borderlineCases: {
    en: [
      {
        query: "What is blockchain?", // –û–±—â–∏–π –≤–æ–ø—Ä–æ—Å –æ –±–ª–æ–∫—á–µ–π–Ω–µ
        expectedTopics: ["blockchain", "stacks"],
        category: "borderline",
        shouldFindDocs: false, // –ï—Å–ª–∏ –Ω–µ—Ç –æ–±—â–∏—Ö —Å—Ç–∞—Ç–µ–π –æ –±–ª–æ–∫—á–µ–π–Ω–µ
        priority: "medium"
      },
      {
        query: "How to buy cryptocurrency?", // –û–±—â–∏–π –∫—Ä–∏–ø—Ç–æ –≤–æ–ø—Ä–æ—Å
        expectedTopics: [],
        category: "borderline",
        shouldFindDocs: false,
        priority: "low"
      },
      {
        query: "What is Web3?", // –°–≤—è–∑–∞–Ω–Ω–∞—è —Ç–µ–º–∞
        expectedTopics: ["web3"],
        category: "borderline", 
        shouldFindDocs: false,
        priority: "low"
      }
    ]
  }
};

/**
 * –ö–ª–∞—Å—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è RAG –∫–∞—á–µ—Å—Ç–≤–∞
 * üçÑ –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–æ–≤–º–µ—Å—Ç–∏–º —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ API endpoints
 */
class RAGQualityTester {
  constructor(apiBase = 'http://localhost:3000/api') {
    this.apiBase = apiBase;
    this.results = {
      totalTests: 0,
      passedTests: 0,
      failedTests: 0,
      skippedTests: 0,
      details: []
    };
    this.testStartTime = Date.now();
  }

  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã RAG
   * üçÑ –û–ë–ù–û–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª–µ–Ω –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —ç—Ç–∞–ø
   */
  async runAllTests() {
    console.log('üçÑ Starting Shrooms RAG Quality Tests...\n');
    
    try {
      // –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Ç–µ—Å—Ç–æ–≤
      console.log('üîç Running preliminary diagnostics...');
      await this.runDiagnostics();
      
      // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π
      console.log('\nüìö Testing Knowledge Base Retrieval...');
      await this.testKnowledgeBaseRetrieval();
      
      // –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ off-topic –∑–∞–ø—Ä–æ—Å–æ–≤
      console.log('\nüö´ Testing Off-Topic Filtering...');
      await this.testOffTopicFiltering();
      
      // –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–Ω–æ–≥–æ—è–∑—ã—á–Ω–æ—Å—Ç–∏
      console.log('\nüåç Testing Multilingual RAG...');
      await this.testMultilingualRAG();
      
      // –¢–µ—Å—Ç 4: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –æ—Ç–≤–µ—Ç–æ–≤ —Å RAG –∏ –±–µ–∑ RAG
      console.log('\nüîÑ Testing RAG vs No-RAG Quality...');
      await this.testRAGQualityComparison();
      
      // –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
      console.log('\n‚ö° Testing RAG Performance...');
      await this.testRAGPerformance();
      
      // –¢–µ—Å—Ç 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤
      console.log('\nüîç Testing Borderline Cases...');
      await this.testBorderlineCases();
      
    } catch (error) {
      console.error('‚ùå Test suite failed:', error.message);
      this.results.details.push({
        test: 'test_suite',
        error: error.message,
        passed: false
      });
    }
    
    this.generateReport();
    return this.results;
  }

  /**
   * üçÑ –ù–û–í–û–ï: –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–∞–º–∏
   */
  async runDiagnostics() {
    try {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ health endpoint
      const healthResponse = await this.makeRequest('/health');
      if (healthResponse && healthResponse.status === 'ok') {
        console.log('  ‚úÖ Server health check passed');
        
        // –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–∏—Å–∞—Ö
        if (healthResponse.services) {
          console.log('  üìä Services status:');
          Object.entries(healthResponse.services).forEach(([service, status]) => {
            const emoji = status === 'ok' ? '‚úÖ' : '‚ùå';
            console.log(`    ${emoji} ${service}: ${status}`);
          });
        }
      } else {
        console.log('  ‚ö†Ô∏è Server health check returned non-OK status');
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ chat health endpoint
      const chatHealthResponse = await this.makeRequest('/chat/health');
      if (chatHealthResponse && chatHealthResponse.success) {
        console.log('  ‚úÖ Chat API health check passed');
      } else {
        console.log('  ‚ö†Ô∏è Chat API health check failed');
      }

    } catch (error) {
      console.log(`  ‚ö†Ô∏è Diagnostics warning: ${error.message}`);
    }
  }

  /**
   * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–∏—Å–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
   * üçÑ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π API endpoint
   */
  async testKnowledgeBaseRetrieval() {
    const highPriorityQuestions = [];
    
    // –°–æ–±–∏—Ä–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –≤—ã—Å–æ–∫–æ–≥–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
    for (const [language, questions] of Object.entries(RAG_TEST_SCENARIOS.knowledgeBaseQuestions)) {
      for (const scenario of questions) {
        if (scenario.priority === 'high') {
          highPriorityQuestions.push({ ...scenario, language });
        }
      }
    }
    
    console.log(`  Testing ${highPriorityQuestions.length} high-priority knowledge queries...`);
    
    for (const scenario of highPriorityQuestions) {
      await this.runRetrievalTest(scenario, scenario.language);
      await this.sleep(500); // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
    }
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–∞–∫–∂–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ä–µ–¥–Ω–∏—Ö –∏ –Ω–∏–∑–∫–∏—Ö –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤
    const otherQuestions = [];
    for (const [language, questions] of Object.entries(RAG_TEST_SCENARIOS.knowledgeBaseQuestions)) {
      for (const scenario of questions) {
        if (scenario.priority !== 'high' && otherQuestions.length < 3) {
          otherQuestions.push({ ...scenario, language });
        }
      }
    }
    
    for (const scenario of otherQuestions) {
      await this.runRetrievalTest(scenario, scenario.language);
      await this.sleep(500);
    }
  }

  /**
   * –í—ã–ø–æ–ª–Ω—è–µ—Ç —Ç–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –¥–ª—è –æ–¥–Ω–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è
   * üçÑ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ API
   */
  async runRetrievalTest(scenario, language) {
    try {
      const response = await this.makeRequest('/chat/test-rag', 'POST', {
        query: scenario.query,
        language: language,
        thresholds: [0.9, 0.8, 0.7, 0.6, 0.5, 0.4]
      });

      this.totalTests++;

      if (response && response.success) {
        const foundDocs = response.data.automaticSearch?.count || 0;
        const hasExpectedResults = scenario.shouldFindDocs ? foundDocs > 0 : foundDocs === 0;
        
        if (hasExpectedResults) {
          this.passedTests++;
          console.log(`    ‚úÖ [${language}] "${scenario.query.substring(0, 40)}..." - Found ${foundDocs} docs (expected: ${scenario.shouldFindDocs ? '>0' : '0'})`);
          
          // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
          if (foundDocs > 0 && scenario.expectedTopics.length > 0) {
            await this.checkDocumentRelevance(response.data.automaticSearch.documents, scenario.expectedTopics);
          }
        } else {
          this.failedTests++;
          console.log(`    ‚ùå [${language}] "${scenario.query.substring(0, 40)}..." - Found ${foundDocs} docs (expected: ${scenario.shouldFindDocs ? '>0' : '0'})`);
        }

        this.results.details.push({
          test: 'knowledge_retrieval',
          language: language,
          query: scenario.query,
          category: scenario.category,
          priority: scenario.priority,
          foundDocs: foundDocs,
          expected: scenario.shouldFindDocs,
          passed: hasExpectedResults,
          scores: response.data.automaticSearch?.scores || []
        });
      } else {
        this.failedTests++;
        console.log(`    ‚ùå [${language}] "${scenario.query.substring(0, 40)}..." - API Error: ${response?.error || 'Unknown error'}`);
        this.results.details.push({
          test: 'knowledge_retrieval',
          language: language,
          query: scenario.query,
          error: response?.error || 'API request failed',
          passed: false
        });
      }
    } catch (error) {
      this.failedTests++;
      console.log(`    ‚ùå [${language}] "${scenario.query.substring(0, 40)}..." - Error: ${error.message}`);
      this.results.details.push({
        test: 'knowledge_retrieval',
        language: language,
        query: scenario.query,
        error: error.message,
        passed: false
      });
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
   * üçÑ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ë–æ–ª–µ–µ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
   */
  async checkDocumentRelevance(documents, expectedTopics) {
    if (!documents || documents.length === 0) return;

    let relevantDocs = 0;
    for (const doc of documents) {
      const content = (doc.preview || doc.content || '').toLowerCase();
      const hasRelevantTopics = expectedTopics.some(topic => 
        content.includes(topic.toLowerCase())
      );
      
      if (hasRelevantTopics) {
        relevantDocs++;
      }
    }

    const relevanceRate = relevantDocs / documents.length;
    if (relevanceRate >= 0.4) { // 40% –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–º–∏ (–ø–æ–Ω–∏–∂–µ–Ω –ø–æ—Ä–æ–≥)
      console.log(`      üìä Document relevance: ${Math.round(relevanceRate * 100)}% (${relevantDocs}/${documents.length})`);
    } else {
      console.log(`      ‚ö†Ô∏è Low document relevance: ${Math.round(relevanceRate * 100)}% (${relevantDocs}/${documents.length})`);
    }
  }

  /**
   * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é off-topic –∑–∞–ø—Ä–æ—Å–æ–≤
   */
  async testOffTopicFiltering() {
    console.log('  Testing off-topic question filtering...');
    
    for (const [language, questions] of Object.entries(RAG_TEST_SCENARIOS.offTopicQuestions)) {
      for (const scenario of questions) {
        if (scenario.priority === 'high' || scenario.priority === 'medium') {
          await this.runRetrievalTest(scenario, language);
          await this.sleep(300);
        }
      }
    }
  }

  /**
   * üçÑ –ù–û–í–û–ï: –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–≥—Ä–∞–Ω–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏
   */
  async testBorderlineCases() {
    console.log('  Testing borderline cases...');
    
    for (const [language, questions] of Object.entries(RAG_TEST_SCENARIOS.borderlineCases)) {
      for (const scenario of questions) {
        await this.runRetrievalTest(scenario, language);
        await this.sleep(300);
      }
    }
  }

  /**
   * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –º–Ω–æ–≥–æ—è–∑—ã—á–Ω–æ—Å—Ç—å RAG
   * üçÑ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ë–æ–ª–µ–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–Ω–æ–≥–æ—è–∑—ã—á–Ω–æ—Å—Ç–∏
   */
  async testMultilingualRAG() {
    console.log('  Testing multilingual consistency...');
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–∞—Ö
    const commonQuestions = {
      wallet_connection: {
        en: "How to connect wallet?",
        ru: "–ö–∞–∫ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –∫–æ—à–µ–ª–µ–∫?",
        es: "¬øC√≥mo conectar billetera?"
      },
      staking_info: {
        en: "What is staking?",
        ru: "–ß—Ç–æ —Ç–∞–∫–æ–µ —Å—Ç–µ–π–∫–∏–Ω–≥?",
        es: "¬øQu√© es el staking?"
      }
    };

    for (const [topic, translations] of Object.entries(commonQuestions)) {
      console.log(`    Testing topic: ${topic}`);
      const results = {};
      
      for (const [lang, query] of Object.entries(translations)) {
        try {
          const response = await this.makeRequest('/chat/test-rag', 'POST', {
            query: query,
            language: lang
          });

          if (response && response.success) {
            results[lang] = response.data.automaticSearch?.count || 0;
          }
          await this.sleep(300);
        } catch (error) {
          console.log(`      ‚ùå Error testing ${lang}: ${error.message}`);
        }
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —è–∑—ã–∫–∏ –¥–∞—é—Ç —Å–æ–ø–æ—Å—Ç–∞–≤–∏–º—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
      const docCounts = Object.values(results);
      if (docCounts.length > 1) {
        const maxDocs = Math.max(...docCounts);
        const minDocs = Math.min(...docCounts);
        const variance = maxDocs - minDocs;
        
        if (variance <= 3) { // –†–∞–∑–Ω–∏—Ü–∞ –Ω–µ –±–æ–ª–µ–µ 3 –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (—É–≤–µ–ª–∏—á–µ–Ω –ø–æ—Ä–æ–≥)
          console.log(`      ‚úÖ Consistent across languages: ${JSON.stringify(results)}`);
          this.passedTests++;
        } else {
          console.log(`      ‚ö†Ô∏è High variance across languages: ${JSON.stringify(results)}`);
          this.failedTests++;
        }
        this.totalTests++;
      }
    }
  }

  /**
   * –°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–æ–≤ —Å RAG –∏ –±–µ–∑ RAG
   * üçÑ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ chat API
   */
  async testRAGQualityComparison() {
    console.log('  Comparing RAG vs Non-RAG response quality...');
    
    const testQueries = [
      "How do I connect my wallet?",
      "What are the staking rewards?",
      "–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ñ–∞—Ä–º–∏–Ω–≥?"
    ];

    for (const query of testQueries) {
      try {
        // –ó–∞–ø—Ä–æ—Å –±–µ–∑ RAG
        const responseWithoutRAG = await this.sendChatMessage(query, false);
        await this.sleep(1000); // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        
        // –ó–∞–ø—Ä–æ—Å —Å RAG
        const responseWithRAG = await this.sendChatMessage(query, true);
        await this.sleep(1000);
        
        if (responseWithoutRAG.success && responseWithRAG.success) {
          const withoutRAGLength = responseWithoutRAG.data.message.length;
          const withRAGLength = responseWithRAG.data.message.length;
          const hasRAGData = responseWithRAG.data.metadata?.ragUsed || false;
          const knowledgeUsed = responseWithRAG.data.metadata?.knowledgeResultsCount || 0;
          
          console.log(`    üìù "${query.substring(0, 30)}..."`);
          console.log(`      Without RAG: ${withoutRAGLength} chars`);
          console.log(`      With RAG: ${withRAGLength} chars (Knowledge: ${knowledgeUsed} docs, RAG used: ${hasRAGData})`);
          
          // –ë–æ–ª–µ–µ —Ä–∞–∑—É–º–Ω–∞—è –æ—Ü–µ–Ω–∫–∞: –µ—Å–ª–∏ RAG –Ω–∞—à–µ–ª –∑–Ω–∞–Ω–∏—è, –æ—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª–µ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º
          let testPassed = false;
          let reason = '';
          
          if (hasRAGData && knowledgeUsed > 0) {
            if (withRAGLength > withoutRAGLength * 1.1) { // 10% –ø—Ä–∏—Ä–æ—Å—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–µ–Ω
              testPassed = true;
              reason = 'RAG provides more detailed response';
            } else {
              testPassed = false;
              reason = 'RAG response not significantly better despite using knowledge';
            }
          } else if (!hasRAGData || knowledgeUsed === 0) {
            testPassed = true; // –ù–æ—Ä–º–∞–ª—å–Ω–æ, –µ—Å–ª–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –∑–Ω–∞–Ω–∏–π
            reason = 'No relevant knowledge found - expected behavior';
          }
          
          if (testPassed) {
            console.log(`      ‚úÖ ${reason}`);
            this.passedTests++;
          } else {
            console.log(`      ‚ùå ${reason}`);
            this.failedTests++;
          }
          
          this.totalTests++;
          
          this.results.details.push({
            test: 'rag_comparison',
            query: query,
            withoutRAG: { length: withoutRAGLength },
            withRAG: { length: withRAGLength, ragUsed: hasRAGData, knowledgeCount: knowledgeUsed },
            passed: testPassed,
            reason: reason
          });
        }
      } catch (error) {
        console.log(`    ‚ùå Error comparing responses: ${error.message}`);
        this.failedTests++;
        this.totalTests++;
      }
    }
  }

  /**
   * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å RAG
   * üçÑ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ë–æ–ª–µ–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
   */
  async testRAGPerformance() {
    console.log('  Testing RAG performance...');
    
    const testQuery = "How to connect wallet?";
    const iterations = 3; // –£–º–µ–Ω—å—à–µ–Ω–æ –¥–ª—è –±–æ–ª–µ–µ –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const times = [];

    for (let i = 0; i < iterations; i++) {
      const startTime = Date.now();
      
      try {
        const response = await this.sendChatMessage(testQuery, true);
        const endTime = Date.now();
        
        if (response.success) {
          times.push(endTime - startTime);
        }
        await this.sleep(1000); // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∏—Ç–µ—Ä–∞—Ü–∏—è–º–∏
      } catch (error) {
        console.log(`    ‚ùå Performance test iteration ${i + 1} failed: ${error.message}`);
      }
    }

    if (times.length > 0) {
      const avgTime = times.reduce((a, b) => a + b, 0) / times.length;
      const maxTime = Math.max(...times);
      const minTime = Math.min(...times);
      
      console.log(`    üìä Average response time: ${Math.round(avgTime)}ms (${iterations} iterations)`);
      console.log(`    üìä Min/Max: ${minTime}ms / ${maxTime}ms`);
      
      // –ë–æ–ª–µ–µ —Ä–∞–∑—É–º–Ω—ã–π –ø–æ—Ä–æ–≥ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (10 —Å–µ–∫—É–Ω–¥)
      if (avgTime < 10000) {
        console.log(`    ‚úÖ Performance within acceptable limits`);
        this.passedTests++;
      } else {
        console.log(`    ‚ùå Performance too slow (${Math.round(avgTime)}ms > 10000ms)`);
        this.failedTests++;
      }
      this.totalTests++;

      this.results.details.push({
        test: 'performance',
        avgTime: avgTime,
        maxTime: maxTime,
        minTime: minTime,
        iterations: times.length,
        passed: avgTime < 10000
      });
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç API
   * üçÑ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ chat API
   */
  async sendChatMessage(message, useRAG = true) {
    const userId = `rag-test-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;
    return await this.makeRequest('/chat', 'POST', {
      message: message,
      userId: userId,
      useRag: useRAG
    });
  }

  /**
   * üçÑ –ù–û–í–û–ï: –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
   */
  async makeRequest(endpoint, method = 'GET', body = null) {
    const url = `${this.apiBase}${endpoint}`;
    const options = {
      method: method,
      headers: {
        'Content-Type': 'application/json',
      }
    };

    if (body && method !== 'GET') {
      options.body = JSON.stringify(body);
    }

    const response = await fetch(url, options);
    return await response.json();
  }

  /**
   * üçÑ –ù–û–í–û–ï: –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
   */
  async sleep(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
   * üçÑ –û–ë–ù–û–í–õ–ï–ù–û: –ë–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
   */
  generateReport() {
    const testDuration = Date.now() - this.testStartTime;
    const successRate = this.totalTests > 0 ? Math.round(this.passedTests / this.totalTests * 100) : 0;
    
    console.log('\nüçÑ Shrooms RAG Quality Test Report');
    console.log('='.repeat(60));
    console.log(`üïí Test Duration: ${Math.round(testDuration / 1000)}s`);
    console.log(`üìä Total Tests: ${this.totalTests}`);
    console.log(`‚úÖ Passed: ${this.passedTests} (${successRate}%)`);
    console.log(`‚ùå Failed: ${this.failedTests} (${Math.round(this.failedTests / this.totalTests * 100)}%)`);
    if (this.skippedTests > 0) {
      console.log(`‚è≠Ô∏è Skipped: ${this.skippedTests}`);
    }
    console.log('='.repeat(60));

    // –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    const testsByCategory = {};
    this.results.details.forEach(detail => {
      const category = detail.test;
      if (!testsByCategory[category]) {
        testsByCategory[category] = { total: 0, passed: 0 };
      }
      testsByCategory[category].total++;
      if (detail.passed) {
        testsByCategory[category].passed++;
      }
    });

    console.log('\nüìà Results by Test Category:');
    Object.entries(testsByCategory).forEach(([category, stats]) => {
      const rate = Math.round(stats.passed / stats.total * 100);
      const emoji = rate >= 80 ? '‚úÖ' : rate >= 60 ? '‚ö†Ô∏è' : '‚ùå';
      console.log(`  ${emoji} ${category}: ${stats.passed}/${stats.total} (${rate}%)`);
    });

    // –ê–Ω–∞–ª–∏–∑ –ø–æ —è–∑—ã–∫–∞–º
    const testsByLanguage = {};
    this.results.details.forEach(detail => {
      if (detail.language) {
        if (!testsByLanguage[detail.language]) {
          testsByLanguage[detail.language] = { total: 0, passed: 0 };
        }
        testsByLanguage[detail.language].total++;
        if (detail.passed) {
          testsByLanguage[detail.language].passed++;
        }
      }
    });

    if (Object.keys(testsByLanguage).length > 0) {
      console.log('\nüåç Results by Language:');
      Object.entries(testsByLanguage).forEach(([language, stats]) => {
        const rate = Math.round(stats.passed / stats.total * 100);
        const emoji = rate >= 80 ? '‚úÖ' : rate >= 60 ? '‚ö†Ô∏è' : '‚ùå';
        console.log(`  ${emoji} ${language}: ${stats.passed}/${stats.total} (${rate}%)`);
      });
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –≤ —Ñ–∞–π–ª
    const reportData = {
      timestamp: new Date().toISOString(),
      testDuration: testDuration,
      summary: {
        total: this.totalTests,
        passed: this.passedTests,
        failed: this.failedTests,
        skipped: this.skippedTests,
        successRate: successRate
      },
      categoryStats: testsByCategory,
      languageStats: testsByLanguage,
      details: this.results.details
    };

    const reportPath = path.join(__dirname, `../logs/rag-test-report-${Date.now()}.json`);
    try {
      // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é logs –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      const logsDir = path.dirname(reportPath);
      if (!fs.existsSync(logsDir)) {
        fs.mkdirSync(logsDir, { recursive: true });
      }
      
      fs.writeFileSync(reportPath, JSON.stringify(reportData, null, 2));
      console.log(`\nüìÅ Detailed report saved to: ${reportPath}`);
    } catch (error) {
      console.log(`\n‚ö†Ô∏è Could not save report: ${error.message}`);
    }

    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    console.log('\nüîç Recommendations:');
    if (successRate >= 90) {
      console.log('  üéâ Excellent RAG performance! System is working optimally.');
    } else if (successRate >= 70) {
      console.log('  üëç Good RAG performance with room for improvement.');
      console.log('  üí° Consider expanding knowledge base for failed queries.');
    } else if (successRate >= 50) {
      console.log('  ‚ö†Ô∏è Moderate RAG performance. Investigate failed tests.');
      console.log('  üí° Check vector store configuration and thresholds.');
    } else {
      console.log('  üö® Poor RAG performance. Immediate attention required.');
      console.log('  üí° Verify knowledge base content and RAG configuration.');
    }

    // –§–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
    console.log('\n' + '='.repeat(60));
    if (successRate >= 80) {
      console.log('üçÑ RAG Quality Test: PASSED ‚úÖ');
    } else {
      console.log('üçÑ RAG Quality Test: NEEDS IMPROVEMENT ‚ö†Ô∏è');
    }
    console.log('='.repeat(60));

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    return reportData;
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Ç–µ—Å—Ç–∞—Ö
module.exports = {
  RAGQualityTester,
  RAG_TEST_SCENARIOS
};

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–∏ –ø—Ä—è–º–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞
if (require.main === module) {
  const tester = new RAGQualityTester();
  tester.runAllTests()
    .then((results) => {
      console.log('\nüéâ RAG Quality Testing completed!');
      const successRate = results.summary.successRate;
      process.exit(successRate >= 70 ? 0 : 1); // Exit code 0 –µ—Å–ª–∏ —É—Å–ø–µ—Ö >= 70%
    })
    .catch(error => {
      console.error('\nüí• RAG Quality Testing failed:', error);
      process.exit(1);
    });
}