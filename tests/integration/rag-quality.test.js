/**
 * @fileoverview –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ RAG –∫–∞—á–µ—Å—Ç–≤–∞
 * @description –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º RAG vs –±–µ–∑ RAG
 */

const fs = require('fs');
const path = require('path');

/**
 * –¢–µ—Å—Ç–æ–≤—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ RAG
 */
const RAG_TEST_SCENARIOS = {
  // –í–æ–ø—Ä–æ—Å—ã, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç–≤–µ—Ç—ã –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π
  knowledgeBaseQuestions: {
    en: [
      {
        query: "How do I connect Xverse wallet?",
        expectedTopics: ["xverse", "wallet", "connect", "browser", "extension"],
        category: "user-guide",
        shouldFindDocs: true
      },
      {
        query: "What is SHROOMS staking?",
        expectedTopics: ["staking", "shrooms", "rewards", "apy"],
        category: "tokenomics", 
        shouldFindDocs: true
      },
      {
        query: "How does farming work in Shrooms?",
        expectedTopics: ["farming", "liquidity", "rewards", "pools"],
        category: "tokenomics",
        shouldFindDocs: true
      }
    ],
    ru: [
      {
        query: "–ö–∞–∫ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –∫–æ—à–µ–ª–µ–∫ Xverse?",
        expectedTopics: ["xverse", "–∫–æ—à–µ–ª–µ–∫", "–ø–æ–¥–∫–ª—é—á", "—Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ"],
        category: "user-guide",
        shouldFindDocs: true
      },
      {
        query: "–ß—Ç–æ —Ç–∞–∫–æ–µ —Å—Ç–µ–π–∫–∏–Ω–≥ SHROOMS?",
        expectedTopics: ["—Å—Ç–µ–π–∫–∏–Ω–≥", "shrooms", "–≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è"],
        category: "tokenomics",
        shouldFindDocs: true
      },
      {
        query: "–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ñ–∞—Ä–º–∏–Ω–≥ –≤ Shrooms?",
        expectedTopics: ["—Ñ–∞—Ä–º–∏–Ω–≥", "–ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å", "–ø—É–ª—ã"],
        category: "tokenomics",
        shouldFindDocs: true
      }
    ],
    es: [
      {
        query: "¬øC√≥mo conectar billetera Xverse?",
        expectedTopics: ["xverse", "billetera", "conectar"],
        category: "user-guide",
        shouldFindDocs: true
      }
    ]
  },

  // –í–æ–ø—Ä–æ—Å—ã, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –ù–ï –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç–≤–µ—Ç–æ–≤ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π
  offTopicQuestions: {
    en: [
      {
        query: "What's the weather today?",
        expectedTopics: [],
        category: "off-topic",
        shouldFindDocs: false
      },
      {
        query: "Tell me about Bitcoin price",
        expectedTopics: [],
        category: "off-topic", 
        shouldFindDocs: false
      },
      {
        query: "How to cook pasta?",
        expectedTopics: [],
        category: "off-topic",
        shouldFindDocs: false
      }
    ],
    ru: [
      {
        query: "–ö–∞–∫–∞—è —Å–µ–≥–æ–¥–Ω—è –ø–æ–≥–æ–¥–∞?",
        expectedTopics: [],
        category: "off-topic",
        shouldFindDocs: false
      },
      {
        query: "–†–∞—Å—Å–∫–∞–∂–∏ –æ —Ü–µ–Ω–µ –±–∏—Ç–∫–æ–∏–Ω–∞",
        expectedTopics: [],
        category: "off-topic",
        shouldFindDocs: false
      }
    ]
  },

  // –ü–æ–≥—Ä–∞–Ω–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏
  borderlineCases: {
    en: [
      {
        query: "What is blockchain?", // –û–±—â–∏–π –≤–æ–ø—Ä–æ—Å –æ –±–ª–æ–∫—á–µ–π–Ω–µ
        expectedTopics: ["blockchain", "stacks"],
        category: "borderline",
        shouldFindDocs: false // –ï—Å–ª–∏ –Ω–µ—Ç –æ–±—â–∏—Ö —Å—Ç–∞—Ç–µ–π –æ –±–ª–æ–∫—á–µ–π–Ω–µ
      },
      {
        query: "How to buy cryptocurrency?", // –û–±—â–∏–π –∫—Ä–∏–ø—Ç–æ –≤–æ–ø—Ä–æ—Å
        expectedTopics: [],
        category: "borderline",
        shouldFindDocs: false
      }
    ]
  }
};

/**
 * –ö–ª–∞—Å—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è RAG –∫–∞—á–µ—Å—Ç–≤–∞
 */
class RAGQualityTester {
  constructor(apiBase = 'http://localhost:3000/api') {
    this.apiBase = apiBase;
    this.results = {
      totalTests: 0,
      passedTests: 0,
      failedTests: 0,
      details: []
    };
  }

  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã RAG
   */
  async runAllTests() {
    console.log('üß™ Starting RAG Quality Tests...\n');
    
    // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π
    await this.testKnowledgeBaseRetrieval();
    
    // –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ off-topic –∑–∞–ø—Ä–æ—Å–æ–≤
    await this.testOffTopicFiltering();
    
    // –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–Ω–æ–≥–æ—è–∑—ã—á–Ω–æ—Å—Ç–∏
    await this.testMultilingualRAG();
    
    // –¢–µ—Å—Ç 4: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –æ—Ç–≤–µ—Ç–æ–≤ —Å RAG –∏ –±–µ–∑ RAG
    await this.testRAGQualityComparison();
    
    // –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    await this.testRAGPerformance();
    
    this.generateReport();
  }

  /**
   * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–∏—Å–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
   */
  async testKnowledgeBaseRetrieval() {
    console.log('üìö Testing Knowledge Base Retrieval...');
    
    for (const [language, questions] of Object.entries(RAG_TEST_SCENARIOS.knowledgeBaseQuestions)) {
      for (const scenario of questions) {
        await this.runRetrievalTest(scenario, language);
      }
    }
  }

  /**
   * –í—ã–ø–æ–ª–Ω—è–µ—Ç —Ç–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –¥–ª—è –æ–¥–Ω–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è
   */
  async runRetrievalTest(scenario, language) {
    try {
      const response = await fetch(`${this.apiBase}/chat/test-rag`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          query: scenario.query,
          language: language,
          thresholds: [0.9, 0.8, 0.7, 0.6, 0.5]
        })
      });

      const data = await response.json();
      this.totalTests++;

      if (data.success) {
        const foundDocs = data.data.automaticSearch?.count || 0;
        const hasExpectedResults = scenario.shouldFindDocs ? foundDocs > 0 : foundDocs === 0;
        
        if (hasExpectedResults) {
          this.passedTests++;
          console.log(`  ‚úÖ [${language}] "${scenario.query}" - Found ${foundDocs} docs (expected: ${scenario.shouldFindDocs ? '>0' : '0'})`);
          
          // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
          if (foundDocs > 0 && scenario.expectedTopics.length > 0) {
            await this.checkDocumentRelevance(data.data.automaticSearch.documents, scenario.expectedTopics);
          }
        } else {
          this.failedTests++;
          console.log(`  ‚ùå [${language}] "${scenario.query}" - Found ${foundDocs} docs (expected: ${scenario.shouldFindDocs ? '>0' : '0'})`);
        }

        this.results.details.push({
          test: 'knowledge_retrieval',
          language: language,
          query: scenario.query,
          category: scenario.category,
          foundDocs: foundDocs,
          expected: scenario.shouldFindDocs,
          passed: hasExpectedResults,
          scores: data.data.automaticSearch?.scores || []
        });
      } else {
        this.failedTests++;
        console.log(`  ‚ùå [${language}] "${scenario.query}" - API Error: ${data.error}`);
      }
    } catch (error) {
      this.failedTests++;
      console.log(`  ‚ùå [${language}] "${scenario.query}" - Error: ${error.message}`);
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
   */
  async checkDocumentRelevance(documents, expectedTopics) {
    if (!documents || documents.length === 0) return;

    let relevantDocs = 0;
    for (const doc of documents) {
      const content = doc.preview?.toLowerCase() || '';
      const hasRelevantTopics = expectedTopics.some(topic => 
        content.includes(topic.toLowerCase())
      );
      
      if (hasRelevantTopics) {
        relevantDocs++;
      }
    }

    const relevanceRate = relevantDocs / documents.length;
    if (relevanceRate >= 0.5) { // 50% –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–º–∏
      console.log(`    üìä Document relevance: ${Math.round(relevanceRate * 100)}% (${relevantDocs}/${documents.length})`);
    } else {
      console.log(`    ‚ö†Ô∏è  Low document relevance: ${Math.round(relevanceRate * 100)}% (${relevantDocs}/${documents.length})`);
    }
  }

  /**
   * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é off-topic –∑–∞–ø—Ä–æ—Å–æ–≤
   */
  async testOffTopicFiltering() {
    console.log('\nüö´ Testing Off-Topic Filtering...');
    
    for (const [language, questions] of Object.entries(RAG_TEST_SCENARIOS.offTopicQuestions)) {
      for (const scenario of questions) {
        await this.runRetrievalTest(scenario, language);
      }
    }
  }

  /**
   * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –º–Ω–æ–≥–æ—è–∑—ã—á–Ω–æ—Å—Ç—å RAG
   */
  async testMultilingualRAG() {
    console.log('\nüåç Testing Multilingual RAG...');
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–∞—Ö
    const commonQuestions = {
      wallet_connection: {
        en: "How to connect wallet?",
        ru: "–ö–∞–∫ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –∫–æ—à–µ–ª–µ–∫?",
        es: "¬øC√≥mo conectar billetera?"
      },
      staking_info: {
        en: "What is staking?",
        ru: "–ß—Ç–æ —Ç–∞–∫–æ–µ —Å—Ç–µ–π–∫–∏–Ω–≥?",
        es: "¬øQu√© es el staking?"
      }
    };

    for (const [topic, translations] of Object.entries(commonQuestions)) {
      console.log(`  Testing topic: ${topic}`);
      const results = {};
      
      for (const [lang, query] of Object.entries(translations)) {
        try {
          const response = await fetch(`${this.apiBase}/chat/test-rag`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
              query: query,
              language: lang
            })
          });

          const data = await response.json();
          if (data.success) {
            results[lang] = data.data.automaticSearch?.count || 0;
          }
        } catch (error) {
          console.log(`    ‚ùå Error testing ${lang}: ${error.message}`);
        }
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —è–∑—ã–∫–∏ –¥–∞—é—Ç —Å–æ–ø–æ—Å—Ç–∞–≤–∏–º—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
      const docCounts = Object.values(results);
      if (docCounts.length > 1) {
        const maxDocs = Math.max(...docCounts);
        const minDocs = Math.min(...docCounts);
        const variance = maxDocs - minDocs;
        
        if (variance <= 2) { // –†–∞–∑–Ω–∏—Ü–∞ –Ω–µ –±–æ–ª–µ–µ 2 –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
          console.log(`    ‚úÖ Consistent across languages: ${JSON.stringify(results)}`);
          this.passedTests++;
        } else {
          console.log(`    ‚ö†Ô∏è  High variance across languages: ${JSON.stringify(results)}`);
          this.failedTests++;
        }
        this.totalTests++;
      }
    }
  }

  /**
   * –°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–æ–≤ —Å RAG –∏ –±–µ–∑ RAG
   */
  async testRAGQualityComparison() {
    console.log('\nüîÑ Testing RAG vs Non-RAG Quality...');
    
    const testQueries = [
      "How do I connect my wallet?",
      "What are the staking rewards?",
      "–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ñ–∞—Ä–º–∏–Ω–≥?"
    ];

    for (const query of testQueries) {
      try {
        // –ó–∞–ø—Ä–æ—Å –±–µ–∑ RAG
        const responseWithoutRAG = await this.sendChatMessage(query, false);
        // –ó–∞–ø—Ä–æ—Å —Å RAG
        const responseWithRAG = await this.sendChatMessage(query, true);
        
        if (responseWithoutRAG.success && responseWithRAG.success) {
          const withoutRAGLength = responseWithoutRAG.data.message.length;
          const withRAGLength = responseWithRAG.data.message.length;
          const hasRAGData = responseWithRAG.data.metadata?.ragUsed || false;
          
          console.log(`  üìù "${query.substring(0, 30)}..."`);
          console.log(`    Without RAG: ${withoutRAGLength} chars`);
          console.log(`    With RAG: ${withRAGLength} chars (RAG used: ${hasRAGData})`);
          
          // –ü—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞: –æ—Ç–≤–µ—Ç —Å RAG –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω—ã–º
          if (hasRAGData && withRAGLength > withoutRAGLength * 1.2) {
            console.log(`    ‚úÖ RAG provides more detailed response`);
            this.passedTests++;
          } else if (!hasRAGData) {
            console.log(`    ‚ö†Ô∏è  RAG was not used for this query`);
          } else {
            console.log(`    ‚ùå RAG response not significantly better`);
            this.failedTests++;
          }
          this.totalTests++;
        }
      } catch (error) {
        console.log(`  ‚ùå Error comparing responses: ${error.message}`);
        this.failedTests++;
        this.totalTests++;
      }
    }
  }

  /**
   * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å RAG
   */
  async testRAGPerformance() {
    console.log('\n‚ö° Testing RAG Performance...');
    
    const testQuery = "How to connect wallet?";
    const iterations = 5;
    const times = [];

    for (let i = 0; i < iterations; i++) {
      const startTime = Date.now();
      
      try {
        const response = await this.sendChatMessage(testQuery, true);
        const endTime = Date.now();
        
        if (response.success) {
          times.push(endTime - startTime);
        }
      } catch (error) {
        console.log(`  ‚ùå Performance test iteration ${i + 1} failed: ${error.message}`);
      }
    }

    if (times.length > 0) {
      const avgTime = times.reduce((a, b) => a + b, 0) / times.length;
      const maxTime = Math.max(...times);
      const minTime = Math.min(...times);
      
      console.log(`  üìä Average response time: ${Math.round(avgTime)}ms`);
      console.log(`  üìä Min/Max: ${minTime}ms / ${maxTime}ms`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ —Ä–∞–∑—É–º–Ω–æ–µ (< 5 —Å–µ–∫—É–Ω–¥)
      if (avgTime < 5000) {
        console.log(`  ‚úÖ Performance within acceptable limits`);
        this.passedTests++;
      } else {
        console.log(`  ‚ùå Performance too slow (>${avgTime}ms)`);
        this.failedTests++;
      }
      this.totalTests++;

      this.results.details.push({
        test: 'performance',
        avgTime: avgTime,
        maxTime: maxTime,
        minTime: minTime,
        iterations: times.length
      });
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç API
   */
  async sendChatMessage(message, useRAG = true) {
    const response = await fetch(`${this.apiBase}/chat`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        message: message,
        userId: `rag-test-${Date.now()}`,
        useRag: useRAG
      })
    });

    return await response.json();
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
   */
  generateReport() {
    console.log('\nüìä RAG Quality Test Report');
    console.log('='.repeat(50));
    console.log(`Total Tests: ${this.totalTests}`);
    console.log(`Passed: ${this.passedTests} (${Math.round(this.passedTests / this.totalTests * 100)}%)`);
    console.log(`Failed: ${this.failedTests} (${Math.round(this.failedTests / this.totalTests * 100)}%)`);
    console.log('='.repeat(50));

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –≤ —Ñ–∞–π–ª
    const reportData = {
      timestamp: new Date().toISOString(),
      summary: {
        total: this.totalTests,
        passed: this.passedTests,
        failed: this.failedTests,
        successRate: Math.round(this.passedTests / this.totalTests * 100)
      },
      details: this.results.details
    };

    const reportPath = path.join(__dirname, `../logs/rag-test-report-${Date.now()}.json`);
    try {
      // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é logs –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      const logsDir = path.dirname(reportPath);
      if (!fs.existsSync(logsDir)) {
        fs.mkdirSync(logsDir, { recursive: true });
      }
      
      fs.writeFileSync(reportPath, JSON.stringify(reportData, null, 2));
      console.log(`üìÅ Detailed report saved to: ${reportPath}`);
    } catch (error) {
      console.log(`‚ö†Ô∏è  Could not save report: ${error.message}`);
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    return reportData;
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Ç–µ—Å—Ç–∞—Ö
module.exports = {
  RAGQualityTester,
  RAG_TEST_SCENARIOS
};

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–∏ –ø—Ä—è–º–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞
if (require.main === module) {
  const tester = new RAGQualityTester();
  tester.runAllTests()
    .then(() => {
      console.log('\nüéâ RAG Quality Testing completed!');
      process.exit(0);
    })
    .catch(error => {
      console.error('\nüí• RAG Quality Testing failed:', error);
      process.exit(1);
    });
}